Bottom: 684d8ed9f9a8ed77e6b4add421740c4b224a8092
Top:    68456f08e932808e8ed9831dd0ab93a1fdf4c763
Author: Andrew Cooper <andrew.cooper@novatechweb.com>
Date:   2018-08-16 09:17:47 -0500

Add option to run Nexus in a container


---
diff --git a/ansible-playbook/group_vars/all/nexus3.yml b/ansible-playbook/group_vars/all/nexus3.yml
index 4dc23cfb..27ea7e22 100644
--- a/ansible-playbook/group_vars/all/nexus3.yml
+++ b/ansible-playbook/group_vars/all/nexus3.yml
@@ -33,11 +33,16 @@ ldap_connections:
     ldap_user_id_attribute: 'uid'
     ldap_user_real_name_attribute: 'cn'
     ldap_user_email_attribute: 'mail'
+    ldap_map_groups_as_roles: yes
+    ldap_map_groups_as_roles_type: "static"
+    ldap_user_memberof_attribute: ""
     ldap_group_base_dn: 'ou=group'
     ldap_group_object_class: 'posixGroup'
-    ldap_group_id_attribute: 'gidNumber'
+    ldap_group_id_attribute: 'cn'
     ldap_group_member_attribute: 'memberUid'
     ldap_group_member_format: '${username}'
+    ldap_user_subtree: false
+    ldap_group_subtree: true
 
 nexus_privileges:
   - name: all-repos-read  # used as key to update a privilege
diff --git a/ansible-playbook/site.yml b/ansible-playbook/site.yml
index 0727917d..9b9c6261 100644
--- a/ansible-playbook/site.yml
+++ b/ansible-playbook/site.yml
@@ -52,12 +52,17 @@
     - build
     - testssh
     - buildbot
+    - nexus
     tags:
     - docker_networking
   - name: Build the openssl Docker volume
     role: docker-openssl
     tags:
     - openssl_container
+  - name: Build and start Nexus Artifact Repository container
+    role: nexus3
+    tags:
+    - nexus_container
   - name: Build and start the SVN Docker container
     role: docker-svn
     svn_repos: 'ddio NCD_Release'
diff --git a/roles/nexus3/defaults/main.yml b/roles/nexus3/defaults/main.yml
index 992be594..ddc4d701 100644
--- a/roles/nexus3/defaults/main.yml
+++ b/roles/nexus3/defaults/main.yml
@@ -12,6 +12,19 @@ nexus_timezone: 'UTC'  # java timezone
 nexus_tmp_dir: '/tmp/nexus'
 nexus_script_dir: '{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/etc/scripts'
 
+nexus_repository_url: 'https://github.com/sonatype/docker-nexus3'
+nexus_container_name: 'nexus3'
+nexus_image_tag: 'nexus:{{ nexus_version}}'
+nexus_backup_volume: nexus-backup
+nexus_data_volume: nexus-data
+nexus_networks: 
+  - name: nexus3
+nexus_port_args:
+  - "8081"
+  - "8443"
+nexus_volumes:
+  - '{{ nexus_data_volume }}:{{ nexus_data_dir }}:z'
+  - '{{ nexus_backup_volume }}:{{ nexus_backup_dir }}:z'
 
 # Nexus Backup
 nexus_backup_dir: '/var/nexus-backup'
@@ -31,6 +44,8 @@ nexus_backup_keep_rotations: 4  # Keep 4 backup rotation by default (current + l
 
 # Nexus purge procedure:
 # run ansible-playbook example.yml -e "purge=true"
+purge: false
+docker: false
 
 # Nexus default properties
 nexus_default_port: 8081
@@ -120,6 +135,7 @@ nexus_proxy_exclude_hosts:
   - "127.*"
   - "[::1]"
 
+nexus_config_maven: false
 nexus_config_pypi: false
 nexus_config_docker: false
 nexus_config_raw: false
diff --git a/roles/nexus3/handlers/main.yml b/roles/nexus3/handlers/main.yml
index 3ee7078e..ad054674 100644
--- a/roles/nexus3/handlers/main.yml
+++ b/roles/nexus3/handlers/main.yml
@@ -15,6 +15,17 @@
     state: stopped
   when: nexus_systemd_service_file.stat.exists
 
+- name: nexus-container-restart
+  docker_container:
+    name: '{{ nexus_container_name }}'
+    restart: yes
+    state: started
+
+- name: nexus-container-stop
+  docker_container:
+    name: '{{ nexus_container_name }}'
+    state: stopped
+
 - name: wait-for-nexus
   wait_for:
     path: "{{ nexus_data_dir }}/log/nexus.log"
diff --git a/roles/nexus3/tasks/call_script.yml b/roles/nexus3/tasks/call_script.yml
index 1edcb9ca..657fd502 100644
--- a/roles/nexus3/tasks/call_script.yml
+++ b/roles/nexus3/tasks/call_script.yml
@@ -1,7 +1,7 @@
 ---
 - name: Calling Groovy script {{ script_name }}
   uri:
-    url: "http://localhost:{{ nexus_default_port }}{{ nexus_default_context_path }}{{ nexus_rest_api_endpoint }}/{{ script_name }}/run"
+    url: "http://{{ public_hostname }}:{{ nexus_default_port }}{{ nexus_default_context_path }}{{ nexus_rest_api_endpoint }}/{{ script_name }}/run"
     user: 'admin'
     password: "{{ current_nexus_admin_password }}"
     headers:
diff --git a/roles/nexus3/tasks/declare_script_each.yml b/roles/nexus3/tasks/declare_script_each.yml
index 16b231a7..5bb77c1c 100644
--- a/roles/nexus3/tasks/declare_script_each.yml
+++ b/roles/nexus3/tasks/declare_script_each.yml
@@ -1,7 +1,7 @@
 ---
 - name: Removing (potential) previously declared Groovy script {{ item }}
   uri:
-    url: "http://localhost:{{ nexus_default_port }}{{ nexus_default_context_path }}{{ nexus_rest_api_endpoint }}/{{ item }}"
+    url: "http://{{ public_hostname }}:{{ nexus_default_port }}{{ nexus_default_context_path }}{{ nexus_rest_api_endpoint }}/{{ item }}"
     user: 'admin'
     password: "{{ current_nexus_admin_password }}"
     method: DELETE
@@ -10,7 +10,7 @@
 
 - name: Declaring Groovy script {{ item }}
   uri:
-    url: "http://localhost:{{ nexus_default_port }}{{ nexus_default_context_path }}{{ nexus_rest_api_endpoint }}"
+    url: "http://{{ public_hostname }}:{{ nexus_default_port }}{{ nexus_default_context_path }}{{ nexus_rest_api_endpoint }}"
     user: 'admin'
     password: "{{ current_nexus_admin_password }}"
     body_format: json
diff --git a/roles/nexus3/tasks/main.yml b/roles/nexus3/tasks/main.yml
index 0e570bf4..59befd09 100644
--- a/roles/nexus3/tasks/main.yml
+++ b/roles/nexus3/tasks/main.yml
@@ -18,7 +18,7 @@
 - include: nexus_install.yml
 
 - include: httpd_reverse_proxy_config.yml
-  when: httpd_setup_enable
+  when: ((not docker) and (httpd_setup_enable))
 
 - include: admin_password_setup.yml
 
diff --git a/roles/nexus3/tasks/nexus_install.yml b/roles/nexus3/tasks/nexus_install.yml
index 02053005..e796909f 100644
--- a/roles/nexus3/tasks/nexus_install.yml
+++ b/roles/nexus3/tasks/nexus_install.yml
@@ -1,301 +1,6 @@
 ---
-- name: Download nexus_package
-  get_url:
-    url: "{{ nexus_download_url }}/{{ nexus_package }}"
-    dest: "{{ nexus_download_dir }}/{{ nexus_package }}"
-    force: no
-  notify:
-    - nexus-service-stop
+- include_tasks: nexus_install_systemd.yml
+  when: not docker
 
-- name: Ensure Nexus o/s group exists
-  group:
-    name: "{{ nexus_os_group }}"
-    state: present
-
-- name: Ensure Nexus o/s user exists
-  user:
-    name: "{{ nexus_os_user }}"
-    group: "{{ nexus_os_group }}"
-    shell: "/bin/bash"
-    state: present
-
-- name: Ensure Nexus installation directory exists
-  file:
-    path: "{{ nexus_installation_dir }}"
-    state: "directory"
-
-- name: Unpack Nexus download
-  unarchive:
-    src: "{{ nexus_download_dir }}/{{ nexus_package }}"
-    dest: "{{ nexus_installation_dir }}"
-    creates: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
-    force: no
-    copy: false
-  notify:
-    - nexus-service-stop
-
-- meta: flush_handlers
-
-- name: Update symlink nexus-latest
-  file:
-    path: "{{ nexus_installation_dir }}/nexus-latest"
-    src: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
-    owner: "{{ nexus_os_user }}"
-    group: "{{ nexus_os_group }}"
-    state: link
-  register: nexus_latest_version
-
-- name: Delete unpacked data directory
-  file:
-    path: "{{ nexus_installation_dir }}/nexus-latest/data"
-    state: absent
-
-- name: Get path to default settings
-  set_fact:
-    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/org.sonatype.nexus.cfg"
-  when: nexus_version is version_compare('3.1.0', '<')
-
-- name: Get path to default settings
-  set_fact:
-    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/nexus-default.properties"
-  when: nexus_version is version_compare('3.1.0', '>=')
-
-- name: Get application settings directories
-  set_fact:
-    nexus_app_dir_settings_dirs:
-      - "{{ nexus_installation_dir }}/nexus-latest/etc"
-  when: nexus_version is version_compare('3.1.0', '<')
-
-- name: Get application settings directories
-  set_fact:
-    nexus_app_dir_settings_dirs:
-      - "{{ nexus_installation_dir }}/nexus-latest/etc"
-      - "{{ nexus_installation_dir }}/nexus-latest/etc/karaf"
-      - "{{ nexus_installation_dir }}/nexus-latest/etc/jetty"
-      - "{{ nexus_installation_dir }}/nexus-latest/etc/fabric"
-      - "{{ nexus_installation_dir }}/nexus-latest/etc/logback"
-      - "{{ nexus_installation_dir }}/nexus-latest/etc/scripts"
-  when: nexus_version is version_compare('3.1.0', '>=')
-
-- name: Get rest API endpoint (v < 3.8.0)
-  set_fact:
-    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
-  when: nexus_version is version_compare('3.8.0', '<')
-
-- name: Get rest API endpoint (v >= 3.8.0)
-  set_fact:
-    nexus_rest_api_endpoint: "service/rest/v1/script"
-  when: nexus_version is version_compare('3.8.0', '>=')
-
-- name: Get path to database restore dir (v < 3.11.0)
-  set_fact:
-    nexus_db_restore_dir: "{{ nexus_data_dir }}/backup"
-  when: nexus_version is version_compare('3.11.0', '<')
-
-- name: Get path to database restore dir (v >= 3.11.0)
-  set_fact:
-    nexus_db_restore_dir: "{{ nexus_data_dir }}/restore-from-backup"
-  when: nexus_version is version_compare('3.11.0', '>=')
-
-- name: Allow nexus to create first-time install configuration files in  {{ nexus_installation_dir }}/nexus-latest/etc
-  file:
-    path: "{{ item }}"
-    state: "directory"
-    owner: "{{ nexus_os_user }}"
-    group: "{{ nexus_os_group }}"
-    mode: "0755"
-    recurse: false
-  with_items: "{{ nexus_app_dir_settings_dirs }}"
-  when: nexus_latest_version.changed
-  register: chown_config_first_time
-  tags:
-    # hard to run as a handler for time being
-    - skip_ansible_lint
-
-- name: Create Nexus data directory
-  file:
-    path: "{{ nexus_data_dir }}"
-    state: "directory"
-    owner: "{{ nexus_os_user }}"
-    group: "{{ nexus_os_group }}"
-
-- name: Setup Nexus data directory
-  lineinfile:
-    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
-    regexp: "^-Dkaraf.data=.*"
-    line: "-Dkaraf.data={{ nexus_data_dir }}"
-
-- name: Setup JVM logfile directory
-  lineinfile:
-    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
-    regexp: "^-XX:LogFile=.*"
-    line: "-XX:LogFile={{ nexus_data_dir }}/log/jvm.log"
-
-- name: Setup Nexus default timezone
-  lineinfile:
-    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
-    regexp: "^-Duser.timezone=.*"
-    line: "-Duser.timezone={{ nexus_timezone }}"
-
-- name: Create Nexus tmp/backup directory
-  file:
-    path: "{{ item }}"
-    state: "directory"
-    owner: "{{ nexus_os_user }}"
-    group: "{{ nexus_os_group }}"
-  with_items:
-    - "{{ nexus_tmp_dir }}"
-    - "{{ nexus_backup_dir }}"
-
-- name: Setup Nexus tmp directory
-  lineinfile:
-    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
-    regexp: "^-Djava.io.tmpdir=.*"
-    line: "-Djava.io.tmpdir={{ nexus_tmp_dir }}"
-
-- name: Set NEXUS_HOME for the service user
-  lineinfile:
-    dest: "/home/{{ nexus_os_user }}/.bashrc"
-    regexp: "^export NEXUS_HOME=.*"
-    line: "export NEXUS_HOME={{ nexus_installation_dir }}/nexus-latest"
-
-- name: Set nexus user
-  lineinfile:
-    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.rc"
-    regexp: ".*run_as_user=.*"
-    line: "run_as_user=\"{{ nexus_os_user }}\""
-
-- name: Set nexus port
-  lineinfile:
-    dest: "{{ nexus_default_settings_file }}"
-    regexp: "^application-port=.*"
-    line: "application-port={{ nexus_default_port }}"
-
-- name: Set nexus context path
-  lineinfile:
-    dest: "{{ nexus_default_settings_file }}"
-    regexp: "^nexus-context-path=.*"
-    line: "nexus-context-path={{ nexus_default_context_path }}"
-
-- name: Bind nexus service to 127.0.0.1 only
-  lineinfile:
-    dest: "{{ nexus_default_settings_file }}"
-    regexp: "^application-host=.*"
-    line: "application-host=127.0.0.1"
-  when: httpd_setup_enable
-
-- name: Create systemd service configuration
-  template:
-    src: "nexus.service"
-    dest: "/etc/systemd/system"
-  notify:
-    - systemd-reload
-
-- block:
-    - name: "Deploy backup restore script"
-      template:
-        src: "nexus-blob-restore.sh.j2"
-        dest: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
-        mode: 0755
-    - name: "Symlink backup restore script to /sbin"
-      file:
-        src: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
-        dest: "/sbin/nexus-blob-restore.sh"
-        state: link
-  when: nexus_backup_configure | bool
-
-- name: 'Check if data directory is empty (first-time install)'
-  command: "ls {{ nexus_data_dir }}"
-  register: nexus_data_dir_contents
-  check_mode: no
-  changed_when: false
-
-- set_fact:
-    nexus_first_install: "{{ nexus_data_dir_contents.stdout == '' }}"
-
-- name: Clean cache for upgrade process
-  file:
-    path: "{{ nexus_data_dir }}/clean_cache"
-    state: touch
-  when: nexus_latest_version.changed and not nexus_first_install
-  tags:
-    # hard to run as a handler for time being
-    - skip_ansible_lint
-
-- meta: flush_handlers
-
-- name: Enable nexus service and make sure it is started
-  systemd:
-    name: nexus.service
-    enabled: yes
-    state: started
-  notify:
-    - wait-for-nexus
-    - wait-for-nexus-port
-
-- meta: flush_handlers
-
-- name: Chown configuration files from {{ nexus_installation_dir }}/nexus-latest/etc back to root
-  file:
-    path: "{{ nexus_installation_dir }}/nexus-latest/etc"
-    owner: "root"
-    group: "root"
-    mode: a=rX,u+w
-    recurse: true
-  when: chown_config_first_time.changed
-  tags:
-    # hard to run as a handler for time being
-    - skip_ansible_lint
-
-- name: Prevent nexus to create any new configuration files in  {{ nexus_installation_dir }}/nexus-latest/etc
-  file:
-    path: "{{ item }}"
-    state: "directory"
-    owner: "root"
-    group: "root"
-    mode: "0755"
-    recurse: false
-  with_items: "{{ nexus_app_dir_settings_dirs }}"
-
-- name: First-time install admin password
-  set_fact:
-    current_nexus_admin_password: 'admin123'
-  when: nexus_first_install
-
-- name: Subsequent re-provision admin password
-  set_fact:
-    current_nexus_admin_password: "{{ nexus_admin_password }}"
-  when: not nexus_first_install
-  no_log: true
-
-- name: Create directory to hold current groovy scripts for reference
-  file:
-    path: "{{ nexus_data_dir }}/groovy-raw-scripts/current"
-    state: directory
-    owner: root
-    group: root
-
-- name: Upload new scripts
-  synchronize:
-    archive: no
-    checksum: yes
-    recursive: yes
-    delete: yes
-    mode: push
-    use_ssh_args: yes
-    src: "files/groovy/"
-    dest: "{{ nexus_data_dir }}/groovy-raw-scripts/new/"
-
-- name: Sync new scripts to old and get differences
-  shell: 'rsync -ric {{ nexus_data_dir }}/groovy-raw-scripts/new/ {{ nexus_data_dir }}/groovy-raw-scripts/current/ | cut -d" " -f 2 | sed "s/\.groovy//g"'
-  register: nexus_groovy_files_changed
-  check_mode: no
-  changed_when: false
-  # simple check on changed files kept on host
-  # skip ansible lint (we don't want to use synchronize module for this)
-  args:
-    warn: false
-
-- name: Declare new or changed groovy scripts in nexus
-  include: declare_script_each.yml
-  with_items: "{{ nexus_groovy_files_changed.stdout_lines}}"
+- include_tasks: nexus_install_docker.yml
+  when: docker
diff --git a/roles/nexus3/tasks/nexus_install_docker.yml b/roles/nexus3/tasks/nexus_install_docker.yml
new file mode 100644
index 00000000..50c528bd
--- /dev/null
+++ b/roles/nexus3/tasks/nexus_install_docker.yml
@@ -0,0 +1,106 @@
+---
+
+- name: Checkout nexus image repository
+  git:
+    repo: '{{ nexus_repository_url }}'
+    version: '{{ nexus_version }}'
+    dest: '{{ nexus_installation_dir }}/nexus-{{ nexus_version }}'
+
+- name: Update nexus image
+  docker_image:
+    name: '{{ nexus_image_tag }}'
+    path: '{{ nexus_installation_dir }}/nexus-{{ nexus_version }}'
+    force: true
+
+- name: Get rest API endpoint (v < 3.8.0)
+  set_fact:
+    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
+  when: nexus_version is version_compare('3.8.0', '<')
+
+- name: Get rest API endpoint (v >= 3.8.0)
+  set_fact:
+    nexus_rest_api_endpoint: "service/rest/v1/script"
+  when: nexus_version is version_compare('3.8.0', '>=')
+
+- name: Get path to database restore dir (v < 3.11.0)
+  set_fact:
+    nexus_db_restore_dir: "{{ nexus_data_dir }}/backup"
+  when: nexus_version is version_compare('3.11.0', '<')
+
+- name: Get path to database restore dir (v >= 3.11.0)
+  set_fact:
+    nexus_db_restore_dir: "{{ nexus_data_dir }}/restore-from-backup"
+  when: nexus_version is version_compare('3.11.0', '>=')
+
+- name: Get internal container path to nexus data
+  set_fact:
+    nexus_data_dir: '/nexus-data'
+
+- name: Create nexus data volume
+  docker_volume:
+    name: '{{ nexus_data_volume }}'
+    state: present
+
+- name: 'Check if data directory is empty (first-time install)'
+  docker_container:
+    name: '{{ nexus_container_name }}-first-run-check'
+    cleanup: yes
+    detach: no
+    image: 'alpine:latest'
+    volumes:
+      - "{{ nexus_data_volume }}:{{ nexus_data_dir }}:z"
+    command: ls "{{ nexus_data_dir }}"
+  register: nexus_data_dir_contents
+  check_mode: no
+  changed_when: false
+
+- set_fact:
+    nexus_first_install: '{{ nexus_data_dir_contents.ansible_facts.docker_container.Output == "" }}'
+
+- name: Create nexus backup volume
+  docker_volume:
+    name: '{{ nexus_backup_volume }}'
+    state: present
+
+- name: Start nexus container
+  docker_container:
+    name: '{{ nexus_container_name }}'
+    hostname: '{{ public_hostname }}'
+    image: '{{ nexus_image_tag }}'
+    networks: '{{ nexus_networks }}'
+    volumes: '{{ nexus_volumes }}'
+    ports: '{{ nexus_port_args }}'
+    state: started
+
+- name: First-time install admin password
+  set_fact:
+    current_nexus_admin_password: 'admin123'
+  when: nexus_first_install 
+
+- name: Subsequent re-provision admin password
+  set_fact:
+    current_nexus_admin_password: "{{ nexus_admin_password }}"
+  when: not nexus_first_install
+  no_log: true
+
+- name: Wait for container to start
+  uri:
+    url: "http://{{ public_hostname }}:{{ nexus_default_port }}{{ nexus_default_context_path }}service/metrics/ping"
+    force_basic_auth: yes
+    method: GET
+    password: "{{ current_nexus_admin_password }}"
+    return_content: yes
+    status_code: 200,204
+    user: 'admin'
+  register: nexus_ping
+  retries: 20
+  delay: 5
+  until: nexus_ping.content == "pong\n"
+
+- name: Declare groovy scripts in nexus
+  include: declare_script_each.yml
+  vars:
+    item: "{{ filename | basename | replace('.groovy','') }}"
+  loop: "{{ query('fileglob', 'groovy/*.groovy') }}"
+  loop_control:
+    loop_var: filename
diff --git a/roles/nexus3/tasks/nexus_install_systemd.yml b/roles/nexus3/tasks/nexus_install_systemd.yml
new file mode 100644
index 00000000..b8c82f5c
--- /dev/null
+++ b/roles/nexus3/tasks/nexus_install_systemd.yml
@@ -0,0 +1,306 @@
+---
+- name: Check if SystemD service is installed
+  stat:
+    path: /etc/systemd/system/nexus.service
+  register: nexus_systemd_service_file
+
+- name: Download nexus_package
+  get_url:
+    url: "{{ nexus_download_url }}/{{ nexus_package }}"
+    dest: "{{ nexus_download_dir }}/{{ nexus_package }}"
+    force: no
+  notify:
+    - nexus-service-stop
+
+- name: Ensure Nexus o/s group exists
+  group:
+    name: "{{ nexus_os_group }}"
+    state: present
+
+- name: Ensure Nexus o/s user exists
+  user:
+    name: "{{ nexus_os_user }}"
+    group: "{{ nexus_os_group }}"
+    shell: "/bin/bash"
+    state: present
+
+- name: Ensure Nexus installation directory exists
+  file:
+    path: "{{ nexus_installation_dir }}"
+    state: "directory"
+
+- name: Unpack Nexus download
+  unarchive:
+    src: "{{ nexus_download_dir }}/{{ nexus_package }}"
+    dest: "{{ nexus_installation_dir }}"
+    creates: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
+    force: no
+    copy: false
+  notify:
+    - nexus-service-stop
+
+- meta: flush_handlers
+
+- name: Update symlink nexus-latest
+  file:
+    path: "{{ nexus_installation_dir }}/nexus-latest"
+    src: "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
+    owner: "{{ nexus_os_user }}"
+    group: "{{ nexus_os_group }}"
+    state: link
+  register: nexus_latest_version
+
+- name: Delete unpacked data directory
+  file:
+    path: "{{ nexus_installation_dir }}/nexus-latest/data"
+    state: absent
+
+- name: Get path to default settings
+  set_fact:
+    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/org.sonatype.nexus.cfg"
+  when: nexus_version is version_compare('3.1.0', '<')
+
+- name: Get path to default settings
+  set_fact:
+    nexus_default_settings_file: "{{ nexus_installation_dir }}/nexus-latest/etc/nexus-default.properties"
+  when: nexus_version is version_compare('3.1.0', '>=')
+
+- name: Get application settings directories
+  set_fact:
+    nexus_app_dir_settings_dirs:
+      - "{{ nexus_installation_dir }}/nexus-latest/etc"
+  when: nexus_version is version_compare('3.1.0', '<')
+
+- name: Get application settings directories
+  set_fact:
+    nexus_app_dir_settings_dirs:
+      - "{{ nexus_installation_dir }}/nexus-latest/etc"
+      - "{{ nexus_installation_dir }}/nexus-latest/etc/karaf"
+      - "{{ nexus_installation_dir }}/nexus-latest/etc/jetty"
+      - "{{ nexus_installation_dir }}/nexus-latest/etc/fabric"
+      - "{{ nexus_installation_dir }}/nexus-latest/etc/logback"
+      - "{{ nexus_installation_dir }}/nexus-latest/etc/scripts"
+  when: nexus_version is version_compare('3.1.0', '>=')
+
+- name: Get rest API endpoint (v < 3.8.0)
+  set_fact:
+    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
+  when: nexus_version is version_compare('3.8.0', '<')
+
+- name: Get rest API endpoint (v >= 3.8.0)
+  set_fact:
+    nexus_rest_api_endpoint: "service/rest/v1/script"
+  when: nexus_version is version_compare('3.8.0', '>=')
+
+- name: Get path to database restore dir (v < 3.11.0)
+  set_fact:
+    nexus_db_restore_dir: "{{ nexus_data_dir }}/backup"
+  when: nexus_version is version_compare('3.11.0', '<')
+
+- name: Get path to database restore dir (v >= 3.11.0)
+  set_fact:
+    nexus_db_restore_dir: "{{ nexus_data_dir }}/restore-from-backup"
+  when: nexus_version is version_compare('3.11.0', '>=')
+
+- name: Allow nexus to create first-time install configuration files in  {{ nexus_installation_dir }}/nexus-latest/etc
+  file:
+    path: "{{ item }}"
+    state: "directory"
+    owner: "{{ nexus_os_user }}"
+    group: "{{ nexus_os_group }}"
+    mode: "0755"
+    recurse: false
+  with_items: "{{ nexus_app_dir_settings_dirs }}"
+  when: nexus_latest_version.changed
+  register: chown_config_first_time
+  tags:
+    # hard to run as a handler for time being
+    - skip_ansible_lint
+
+- name: Create Nexus data directory
+  file:
+    path: "{{ nexus_data_dir }}"
+    state: "directory"
+    owner: "{{ nexus_os_user }}"
+    group: "{{ nexus_os_group }}"
+
+- name: Setup Nexus data directory
+  lineinfile:
+    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
+    regexp: "^-Dkaraf.data=.*"
+    line: "-Dkaraf.data={{ nexus_data_dir }}"
+
+- name: Setup JVM logfile directory
+  lineinfile:
+    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
+    regexp: "^-XX:LogFile=.*"
+    line: "-XX:LogFile={{ nexus_data_dir }}/log/jvm.log"
+
+- name: Setup Nexus default timezone
+  lineinfile:
+    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
+    regexp: "^-Duser.timezone=.*"
+    line: "-Duser.timezone={{ nexus_timezone }}"
+
+- name: Create Nexus tmp/backup directory
+  file:
+    path: "{{ item }}"
+    state: "directory"
+    owner: "{{ nexus_os_user }}"
+    group: "{{ nexus_os_group }}"
+  with_items:
+    - "{{ nexus_tmp_dir }}"
+    - "{{ nexus_backup_dir }}"
+
+- name: Setup Nexus tmp directory
+  lineinfile:
+    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.vmoptions"
+    regexp: "^-Djava.io.tmpdir=.*"
+    line: "-Djava.io.tmpdir={{ nexus_tmp_dir }}"
+
+- name: Set NEXUS_HOME for the service user
+  lineinfile:
+    dest: "/home/{{ nexus_os_user }}/.bashrc"
+    regexp: "^export NEXUS_HOME=.*"
+    line: "export NEXUS_HOME={{ nexus_installation_dir }}/nexus-latest"
+
+- name: Set nexus user
+  lineinfile:
+    dest: "{{ nexus_installation_dir }}/nexus-latest/bin/nexus.rc"
+    regexp: ".*run_as_user=.*"
+    line: "run_as_user=\"{{ nexus_os_user }}\""
+
+- name: Set nexus port
+  lineinfile:
+    dest: "{{ nexus_default_settings_file }}"
+    regexp: "^application-port=.*"
+    line: "application-port={{ nexus_default_port }}"
+
+- name: Set nexus context path
+  lineinfile:
+    dest: "{{ nexus_default_settings_file }}"
+    regexp: "^nexus-context-path=.*"
+    line: "nexus-context-path={{ nexus_default_context_path }}"
+
+- name: Bind nexus service to 127.0.0.1 only
+  lineinfile:
+    dest: "{{ nexus_default_settings_file }}"
+    regexp: "^application-host=.*"
+    line: "application-host=127.0.0.1"
+  when: httpd_setup_enable
+
+- name: Create systemd service configuration
+  template:
+    src: "nexus.service"
+    dest: "/etc/systemd/system"
+  notify:
+    - systemd-reload
+
+- block:
+    - name: "Deploy backup restore script"
+      template:
+        src: "nexus-blob-restore.sh.j2"
+        dest: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
+        mode: 0755
+    - name: "Symlink backup restore script to /sbin"
+      file:
+        src: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
+        dest: "/sbin/nexus-blob-restore.sh"
+        state: link
+  when: nexus_backup_configure | bool
+
+- name: 'Check if data directory is empty (first-time install)'
+  command: "ls {{ nexus_data_dir }}"
+  register: nexus_data_dir_contents
+  check_mode: no
+  changed_when: false
+
+- set_fact:
+    nexus_first_install: "{{ nexus_data_dir_contents.stdout == '' }}"
+
+- name: Clean cache for upgrade process
+  file:
+    path: "{{ nexus_data_dir }}/clean_cache"
+    state: touch
+  when: nexus_latest_version.changed and not nexus_first_install
+  tags:
+    # hard to run as a handler for time being
+    - skip_ansible_lint
+
+- meta: flush_handlers
+
+- name: Enable nexus service and make sure it is started
+  systemd:
+    name: nexus.service
+    enabled: yes
+    state: started
+  notify:
+    - wait-for-nexus
+    - wait-for-nexus-port
+
+- meta: flush_handlers
+
+- name: Chown configuration files from {{ nexus_installation_dir }}/nexus-latest/etc back to root
+  file:
+    path: "{{ nexus_installation_dir }}/nexus-latest/etc"
+    owner: "root"
+    group: "root"
+    mode: a=rX,u+w
+    recurse: true
+  when: chown_config_first_time.changed
+  tags:
+    # hard to run as a handler for time being
+    - skip_ansible_lint
+
+- name: Prevent nexus to create any new configuration files in  {{ nexus_installation_dir }}/nexus-latest/etc
+  file:
+    path: "{{ item }}"
+    state: "directory"
+    owner: "root"
+    group: "root"
+    mode: "0755"
+    recurse: false
+  with_items: "{{ nexus_app_dir_settings_dirs }}"
+
+- name: First-time install admin password
+  set_fact:
+    current_nexus_admin_password: 'admin123'
+  when: nexus_first_install
+
+- name: Subsequent re-provision admin password
+  set_fact:
+    current_nexus_admin_password: "{{ nexus_admin_password }}"
+  when: not nexus_first_install
+  no_log: true
+
+- name: Create directory to hold current groovy scripts for reference
+  file:
+    path: "{{ nexus_data_dir }}/groovy-raw-scripts/current"
+    state: directory
+    owner: root
+    group: root
+
+- name: Upload new scripts
+  synchronize:
+    archive: no
+    checksum: yes
+    recursive: yes
+    delete: yes
+    mode: push
+    use_ssh_args: yes
+    src: "files/groovy/"
+    dest: "{{ nexus_data_dir }}/groovy-raw-scripts/new/"
+
+- name: Sync new scripts to old and get differences
+  shell: 'rsync -ric {{ nexus_data_dir }}/groovy-raw-scripts/new/ {{ nexus_data_dir }}/groovy-raw-scripts/current/ | cut -d" " -f 2 | sed "s/\.groovy//g"'
+  register: nexus_groovy_files_changed
+  check_mode: no
+  changed_when: false
+  # simple check on changed files kept on host
+  # skip ansible lint (we don't want to use synchronize module for this)
+  args:
+    warn: false
+
+- name: Declare new or changed groovy scripts in nexus
+  include: declare_script_each.yml
+  with_items: "{{ nexus_groovy_files_changed.stdout_lines}}"
diff --git a/roles/nexus3/tasks/nexus_purge.yml b/roles/nexus3/tasks/nexus_purge.yml
index caa2a656..a9b2405a 100644
--- a/roles/nexus3/tasks/nexus_purge.yml
+++ b/roles/nexus3/tasks/nexus_purge.yml
@@ -1,25 +1,7 @@
 ---
-- name: Make sure nexus is stopped
-  debug:
-    msg: "trigger nexus stop"
-  changed_when: true
-  notify:
-    - nexus-service-stop
 
-- meta: flush_handlers
+- include_tasks: nexus_purge_systemd.yml
+  when: not docker
 
-- name: "Purge Nexus"
-  file:
-    path: "{{ item }}"
-    state: absent
-  with_items:
-    - "{{ nexus_data_dir }}"
-    - "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
-    - "{{ nexus_restore_log }}"
-    - "{{ nexus_installation_dir }}/nexus-latest"
-    # - "{{ nexus_backup_dir }}" # Optional
-
-- name: "remove nexus package if present"
-  package:
-    name: nexus
-    state: absent
+- include_tasks: nexus_purge_docker.yml
+  when: docker
diff --git a/roles/nexus3/tasks/nexus_purge_docker.yml b/roles/nexus3/tasks/nexus_purge_docker.yml
new file mode 100644
index 00000000..ef6c3ca9
--- /dev/null
+++ b/roles/nexus3/tasks/nexus_purge_docker.yml
@@ -0,0 +1,24 @@
+---
+- name: Make sure nexus is stopped
+  debug:
+    msg: "trigger nexus stop"
+  changed_when: true
+  notify:
+    - nexus-container-stop
+
+- meta: flush_handlers
+
+- name: "Remove Nexus Container"
+  docker_container:
+    name: "{{ nexus_container_name }}"
+    state: absent
+
+- name: "Purge Nexus"
+  docker_volume:
+    name: "{{ nexus_data_volume }}"
+    state: absent
+
+- name: "remove nexus package if present"
+  package:
+    name: nexus
+    state: absent
diff --git a/roles/nexus3/tasks/nexus_purge_systemd.yml b/roles/nexus3/tasks/nexus_purge_systemd.yml
new file mode 100644
index 00000000..caa2a656
--- /dev/null
+++ b/roles/nexus3/tasks/nexus_purge_systemd.yml
@@ -0,0 +1,25 @@
+---
+- name: Make sure nexus is stopped
+  debug:
+    msg: "trigger nexus stop"
+  changed_when: true
+  notify:
+    - nexus-service-stop
+
+- meta: flush_handlers
+
+- name: "Purge Nexus"
+  file:
+    path: "{{ item }}"
+    state: absent
+  with_items:
+    - "{{ nexus_data_dir }}"
+    - "{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
+    - "{{ nexus_restore_log }}"
+    - "{{ nexus_installation_dir }}/nexus-latest"
+    # - "{{ nexus_backup_dir }}" # Optional
+
+- name: "remove nexus package if present"
+  package:
+    name: nexus
+    state: absent
