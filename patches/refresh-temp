Bottom: fda32a70a3dcd3faf576b05f2200c182ce885e7a
Top:    197349585e9c47b7d367faf9a0bc7118476739a7
Author: Andrew Cooper <andrew.cooper@novatechweb.com>
Date:   2018-08-29 15:07:01 -0500

Refresh of fixup-update-ptxdist-build-factories

---
diff --git a/ansible-playbook/buildbot.yml b/ansible-playbook/buildbot.yml
index b68da51b..87fce125 100644
--- a/ansible-playbook/buildbot.yml
+++ b/ansible-playbook/buildbot.yml
@@ -41,6 +41,7 @@
     - buildbot
     - buildbot-worker
     - buildbot-worker-ntel
+    - buildbot-worker-ptxdist
   vars:
     asset_host: "{{hostvars['nexus']['uri']}}"
     asset_user: "buildbot"
@@ -54,10 +55,10 @@
       command: ssh-keyscan {{gitlab_hostname}}
       register: gitlab_keys
     - name: Build and start the Buildbot worker container
-      import_role: 
+      import_role:
         name: buildbot-worker-ntel
     - name: Build and start the Buildbot worker container
-      import_role: 
+      import_role:
         name: buildbot-worker-ptxdist
 
 - name: Gitlab public keys for buildbot containers
diff --git a/roles/buildbot-master/files/ptxdist.py b/roles/buildbot-master/files/ptxdist.py
index eea89644..6a52b397 100644
--- a/roles/buildbot-master/files/ptxdist.py
+++ b/roles/buildbot-master/files/ptxdist.py
@@ -4,6 +4,10 @@ from buildbot.plugins import *
 from datetime import datetime
 from buildbot.config import BuilderConfig
 
+c = WorkerConfig = {}
+
+DEFAULT_BRANCH = 'master'
+DEFAULT_REPO = 'git@git.novatech-llc.com:Orion-ptxdist/workspace-ptxdist2'
 ASSET_HOST = os.getenv("ASSET_HOST", default="http://127.0.0.1")
 
 collections = {
@@ -17,21 +21,19 @@ collections = {
 # a Worker object, specifying a unique worker name and password.  The same
 # worker name and password must be configured on the worker.
 workers = [
-    worker.Worker("worker-ptxdist", "pass", max_builds=1),
-    worker.Worker("orion-i686-slave", "pass"),
-    worker.Worker("orion-armeb-xscale-slave", "pass"),
-    worker.Worker("orion-am335x-slave", "pass"),
+    worker.Worker("worker-ptxdist", "pass", max_builds=3),
+    worker.Worker("orion-i686-slave", "pass", max_builds=1),
+    worker.Worker("orion-armeb-xscale-slave", "pass", max_builds=1),
+    worker.Worker("orion-am335x-slave", "pass", max_builds=1),
 ]
 
-worker_ptxdist_repourl = 'git@git.novatech-llc.com:Orion-ptxdist/workspace-ptxdist2'
-worker_ptxdist_branch = 'master'
 acceptance_test_repourl = 'git@git.novatech-llc.com:NovaTech-Testing/AcceptanceTests.git'
 
 # CHANGESOURCES
 change_source = [
     changes.GitPoller(
-        repourl=worker_ptxdist_repourl,
-        branches=['master'],
+        repourl=DEFAULT_REPO,
+        branches=[DEFAULT_BRANCH],
         project='ptxdist',
         workdir='gitpoller-ptxdist')
 ]
@@ -56,30 +58,27 @@ schedulers = [
     #                            treeStableTimer=9*60,
     #                            builderNames=["linux-3.8_am335x"]))
     schedulers.ForceScheduler(
-        name="Force_PTXdist",
+        name="ptxdist-force",
         label="Force PTXdist Build",
         builderNames=[
-            "force_armeb_xscale",
-            "force_i686",
-            "force_am335x",
+            "force-armeb-xscale",
+            "force-i686",
+            "force-am335x",
         ],
         codebases=[
             util.CodebaseParameter(
                 codebase="orion-ptxdist-workspace",
-                label="Main repository",
+                label="Build Source",
                 # will generate a combo box
-                branch=util.StringParameter(
-                    name="branch",
-                    default=worker_ptxdist_branch),
                 repository=util.StringParameter(
                     name="repository",
-                    default=worker_ptxdist_repourl),
-
-                # will generate nothing in the form, but revision, repository,
-                # and project are needed by buildbot scheduling system so we
-                # need to pass a value ("")
-                revision=util.FixedParameter(name="revision", default=""),
-                project=util.FixedParameter(name="project", default="orion-ptxdist"),
+                    default=DEFAULT_REPO),
+                branch=util.StringParameter(
+                    name="branch",
+                    default=DEFAULT_BRANCH),
+                revision=util.StringParameter(
+                    name="revision",
+                    default="")
             )
         ],
         properties=[
@@ -148,19 +147,6 @@ schedulers = [
 # only take place on one worker.
 
 
-class PTXDistBuildCounter(util.LogLineObserver):
-    numTargets = 0
-    numPackages = 0
-
-    def outLineReceived(self, line):
-        if line.startswith('finished target '):
-            self.numTargets += 1
-            self.step.setProgress('targets', self.numTargets)
-            if line.strip().endswith('.targetinstall'):
-                self.numPackages += 1
-                self.step.setProgress('packages', self.numPackages)
-
-
 class PTXDistBuild(steps.ShellSequence):
 
     def __init__(self, **kwargs):
@@ -169,16 +155,13 @@ class PTXDistBuild(steps.ShellSequence):
 
         steps.ShellSequence.__init__(self, **kwargs)
 
-        counter = PTXDistBuildCounter()
-        self.addLogObserver('stdio', counter)
-        self.progressMetrics += ('targets', 'packages')
-
         self.name = "PTXDist Build"
         self.description = "building"
         self.descriptionDone = "built"
         self.commands = [
             # set ptxdist build platform
             util.ShellArg(
+                haltOnFailure=True,
                 command=[
                     "ptxdist",
                     "platform",
@@ -187,6 +170,7 @@ class PTXDistBuild(steps.ShellSequence):
 
             # set ptxdist target
             util.ShellArg(
+                haltOnFailure=True,
                 command=[
                     "ptxdist",
                     "select",
@@ -196,6 +180,7 @@ class PTXDistBuild(steps.ShellSequence):
             # run ptxdist build with build.py
             util.ShellArg(
                 logfile="ptxdist build",
+                haltOnFailure=True,
                 command=util.FlattenList([
                     "python",
                     "scripts/build.py",
@@ -212,8 +197,31 @@ class PTXDistBuild(steps.ShellSequence):
                 ])
             ),
 
+            util.ShellArg(
+                logfile="archive",
+                haltOnFailure=True,
+                command=[
+                    "tar", "-v", "-c", "-z",
+                    "-C", util.Property("ipkg_root"),
+                    "-f", util.Interpolate("%(prop:artifact_dest)s/%(prop:ipkg_artifact)s"),
+                    util.Property("project")
+                ]
+            ),
+class PTXDistImages(steps.ShellSequence):
+
+    def __init__(self, **kwargs):
+        kwargs.setdefault('haltOnFailure', True)
+        kwargs.setdefault('flunkOnFailure', True)
+
+        steps.ShellSequence.__init__(self, **kwargs)
+
+        self.name = "PTXDist Images"
+        self.description = "making images"
+        self.descriptionDone = "images"
+        self.commands = [
             # set ptxdist collection
             util.ShellArg(
+                haltOnFailure=True,
                 command=[
                     "ptxdist",
                     "collection",
@@ -222,17 +230,26 @@ class PTXDistBuild(steps.ShellSequence):
 
             # If building a release, create and copy images
             util.ShellArg(
-                command=["ptxdist", "images"]
+                logfile="ptxdist images",
+                haltOnFailure=True,
+                command=["ptxdist", "images"],
             ),
 
+            util.ShellArg(
+                logfile="archive",
+                haltOnFailure=True,
+                command=[
+                    "tar", "-v", "-c", "-z",
+                    "-C", util.Property("image_root"),
+                    "-f", util.Interpolate("%(prop:artifact_dest)s/%(prop:image_artifact)s"),
+                    "."
         ]
+            ),
 
 
-git_lock = util.MasterLock("git")
-
 
-@util.renderer
-def CurrentTime(props):
+def CurrentTime():
+    from datetime import datetime
     import string
     dt = datetime.now()
     dt.replace(microsecond=0)
@@ -244,18 +261,43 @@ def CurrentTime(props):
 def ComputeBuildProperties(props):
     newprops = {}
 
-    newprops['timestamp'] = ts = CurrentTime
+    newprops['timestamp'] = CurrentTime()
+
+    version = props.getProperty('version', default=timestamp)
+
+    newprops['project'] = "OrionLX-%s-glibc" % (
+        props.getProperty("platform")
+    )
 
-    newprops['project'] = proj = util.Interpolate(
-        "OrionLX-%(prop:platform)s-glibc"
+    newprops['artifact_dest'] = "/cache/artifacts/%s" % (
+        version
     )
 
-    newprops['dest'] = dest = util.Interpolate(
-        "/cache/images/%(kw:p)s", p=proj
+    newprops['image_root'] = "%s/build/platform-%s/images" % (
+        props.getProperty("builddir"),
+        props.getProperty("platform"),
     )
 
-    newprops['archive'] = archive = util.Interpolate(
-        "%(kw:d)s/%(prop:machine)s.%(kw:t)s.tar.gz", d=dest, t=ts
+    newprops['image_artifact'] = "%s-%s.images.tar.gz" % (
+        newprops['project'],
+        version,
+    )
+
+    newprops['ipkg_root'] = "/cache/ipkg-repository"
+
+    newprops['ipkg_repo'] = "%s/%s" % (
+        newprops['ipkg_root'],
+        newprops['project'],
+    )
+
+    newprops['ipkg_artifact'] = "%s-%s.ipkg.tar.gz" % (
+        newprops['project'],
+        version
+    )
+
+    newprops['collection'] = collections.get(
+        props.getProperty('platform')
+    )
     )
 
     newprops['ipkg'] = ipkg = util.Interpolate(
@@ -275,12 +317,11 @@ def isReleaseBuild(step):
 # Create build factory for ptxdist
 ptxdist_factory = util.BuildFactory()
 ptxdist_factory.addSteps([
-
     steps.SetProperties(ComputeBuildProperties),
 
-    steps.MakeDirectory(dir=util.Property('dest')),
+    steps.MakeDirectory(dir=util.Property('artifact_dest')),
 
-    steps.MakeDirectory(dir=util.Property('ipkg')),
+    steps.MakeDirectory(dir=util.Property('ipkg_repo')),
 
     # check out the source
     steps.Git(
@@ -289,8 +330,6 @@ ptxdist_factory.addSteps([
         branch=util.Property('branch'),
         mode=util.Interpolate("%(prop:clobber:#?|full|incremental)s"),
         method="clobber",
-        locks=[git_lock.access('exclusive')],
-        retry=(360, 5)
     ),
 
     PTXDistBuild(),
