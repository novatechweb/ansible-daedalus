Bottom: 10a9ca3823e3d88f87643dfc4834e1f1fb3835be
Top:    69cd832bc3fca25771b10ddd542bd957dabc03c9
Author: Andrew Cooper <andrew.cooper@novatechweb.com>
Date:   2018-06-15 17:14:10 -0500

Refresh of update-gitlab-to-10-1

---
diff --git a/ansible-playbook/gitlab.yml b/ansible-playbook/gitlab.yml
index e69de29b..3a18b690 100644
--- a/ansible-playbook/gitlab.yml
+++ b/ansible-playbook/gitlab.yml
@@ -0,0 +1,78 @@
+---
+
+- name: Install/Setup Docker images and containers on daedalus
+  hosts: daedalus
+  remote_user: ansibleremote
+  become: true
+  become_user: root
+  become_method: sudo
+  tasks:
+  - set_fact:
+      openssl_dv_name: openssl_DV
+
+  # - name: Gitlab 7.14.3
+  #   include_role: 
+  #     name: docker-gitlab
+  
+  # - name: Gitlab 8.8.0
+  #   include_role:
+  #     name: gitlab-sameersbn-8
+  #   vars:
+  #     docker_name_prefix: 'sameersbn8-'
+  #     upgrade: true
+  #     old_prefix: ''
+
+  # - name: Backup Gitlab 8.8.0
+  #   command: >
+  #     docker exec -u git sameersbn8-gitlab
+  #     bundle exec rake gitlab:backup:create
+
+  # - name: Rename backup file
+  #   block:
+  #   - find:
+  #       path: '/tmp/docker/GIT'
+  #       pattern: '*_gitlab_backup.tar'
+  #     register: backups
+  #   - set_fact:
+  #       backup_file: '{{ backups.files[0].path | replace("_gitlab_backup.tar","_8.8.0_gitlab_backup.tar") }}'
+  #     when: backups.matched > 0
+  #   - file:
+  #       path: /tmp/bacula-restores/tmp/docker/GIT
+  #       state: directory
+  #   - command: >
+  #       mv "{{ backups.files[0].path }}"
+  #       "/tmp/bacula-restores/{{ backup_file }}"
+  #     when: backups.matched > 0
+
+  # - name: Shutdown Gitlab 8.8.0
+  #   docker_container: 
+  #     name: '{{ old_prefix }}{{ item }}'
+  #     state: stopped
+  #   loop:
+  #   - gitlab
+  #   - gitlab-redis
+  #   - gitlab-db
+  #   vars:
+  #     old_prefix: 'sameersbn8-'
+
+  - name: Gitlab Omnibus 8.8.0
+    include_role:
+      name: gitlab-omnibus-8
+    vars:
+      docker_name_prefix: 'omnibus8-'
+
+  # - name: Gitlab Omnibus 9.5.0
+  #   include_role:
+  #     name: gitlab-omnibus-9
+  #   vars:
+  #     old_prefix: 'omnibus8-'
+  #     docker_name_prefix: 'omnibus9-'
+  #     upgrade: true
+
+  # - name: Gitlab Omnibus 10.1.7
+  #   include_role:
+  #     name: gitlab-omnibus-10
+  #   vars:
+  #     old_prefix: 'omnibus9-'
+  #     docker_name_prefix: 'omnibus10-'
+  #     upgrade: true
diff --git a/ansible-playbook/library/docker_volume_clone.py b/ansible-playbook/library/docker_volume_clone.py
new file mode 100644
index 00000000..8dcc4242
--- /dev/null
+++ b/ansible-playbook/library/docker_volume_clone.py
@@ -0,0 +1,147 @@
+#!/usr/bin/python
+#
+# Copyright 2016 Red Hat | Ansible
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'community'}
+
+
+DOCUMENTATION = '''
+---
+module: docker_volume_clone
+
+short_description: Clone a docker volume
+
+version_added: "2.5.0"
+
+description:
+     - Clones one docker named volume (or host directory)
+       to another docker named volume (or host directory)
+
+options:
+  src:
+    description:
+      - A volume name or host directory
+    required: true
+  dest:
+    description:
+      - A volume name or host directory
+    required: true
+
+extends_documentation_fragment:
+    - docker
+
+requirements:
+  - "python >= 2.6"
+  - "docker-py >= 1.7.0"
+  - "Docker API >= 1.20"
+
+author:
+  - Andrew Cooper (me@andrewcooper.me)
+
+'''
+
+EXAMPLES = '''
+
+- name: Clone one volume into another
+  docker_volume_clone:
+    src: volume1
+    dest: volume2
+
+- name: Mirror a host directory into a volume
+  docker_volume_clone:
+    src: /path/to/host/directory
+    dest: volume2
+'''
+
+RETURN = '''
+'''
+
+try:
+    import docker
+    from docker import utils
+except ImportError:
+    # missing docker-py handled in docker_common
+    pass
+
+from ansible.module_utils.docker_common import AnsibleDockerClient, DockerBaseClass
+
+
+class VolumeManager(DockerBaseClass):
+
+    def __init__(self, client):
+
+        super(VolumeManager, self).__init__()
+
+        self.client = client
+        self.hlclient = docker.DockerClient(**client._connect_params)
+
+        self.src = self.client.module.params.get('src')
+        self.dest = self.client.module.params.get('dest')
+        self.log("Cloning volume %s to %s" % (self.src, self.dest))
+        self.results = {}
+
+        # self.create_rsync_image()
+        self.clone_volume()
+
+    def create_rsync_image(self):
+        import StringIO
+        dockerfile = StringIO.StringIO("""
+            FROM alpine:latest
+            RUN apk add --no-cache rsync
+            ENTRYPOINT ["/usr/bin/rsync"]
+            """)
+        self.rsync = self.hlclient.images.build(
+            fileobj=dockerfile,
+            tag='ansibleutils/rsync:latest'
+        )
+
+    def clone_volume(self):
+        cmd = "apk add --no-cache rsync && /usr/bin/rsync --archive --del /from/ /to/"
+        stdout = ''
+        try:
+            stdout = self.hlclient.containers.run(
+                image='alpine:latest',
+                command=['/bin/ash', '-c', cmd],
+                auto_remove=True,
+                stdout=True,
+                stderr=True,
+                volumes={
+                    self.src: {'bind': '/from', 'mode': 'ro'},
+                    self.dest: {'bind': '/to', 'mode': 'rw'}
+                }
+            )
+            self.results['rc'] = 0
+            self.results['changed'] = True
+        except (docker.errors.ContainerError,
+                docker.errors.ImageNotFound,
+                docker.errors.APIError) as err:
+            self.results['rc'] = 1
+            self.results['failed'] = True
+            self.results['msg'] = str(err)
+        finally:
+            self.results['stdout'] = stdout
+
+
+def main():
+    argument_spec = dict(
+        src=dict(type='str', required=True),
+        dest=dict(type='str', required=True),
+    )
+
+    client = AnsibleDockerClient(
+        argument_spec=argument_spec
+    )
+
+    cm = VolumeManager(client)
+    client.module.exit_json(**cm.results)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/roles/docker-gitlab/defaults/main.yml b/roles/docker-gitlab/defaults/main.yml
index 5e14d572..1dda01c1 100644
--- a/roles/docker-gitlab/defaults/main.yml
+++ b/roles/docker-gitlab/defaults/main.yml
@@ -18,17 +18,19 @@ gitlab_db_user: novatech
 gitlab_image_repo: 'https://github.com/novatechweb/docker-gitlab.git'
 gitlab_image_name: '{{ docker_registry_username }}/gitlab'
 gitlab_dv_image_name: '{{ docker_registry_username }}/gitlab'
-gitlab_db_image_name: '{{ docker_registry_username }}/postgres'
-redis_image_name: '{{ docker_registry_username }}/redis'
+gitlab_db_image_name: 'postgres'
+gitlab_db_image_tag: '9.4'
+redis_image_name: 'redis'
+redis_image_tag: '3.0'
 
 # the name of the gitlab container
 gitlab_container_name: '{{ docker_name_prefix }}gitlab'
 
 # the name of the redis container for gitlab
-gitlab_redis_container_name: '{{ docker_name_prefix }}gitlab_redis'
+gitlab_redis_container_name: '{{ docker_name_prefix }}gitlab-redis'
 
 # the name of the postgres container for gitlab
-gitlab_db_container_name: '{{ docker_name_prefix }}gitlab_db'
+gitlab_db_container_name: '{{ docker_name_prefix }}gitlab-db'
 
 # the name of the data-volume used by the container
 gitlab_dv_name: '{{ docker_name_prefix }}gitlab_DV'
diff --git a/roles/docker-gitlab/tasks/main.yml b/roles/docker-gitlab/tasks/main.yml
index 4b5912f2..9b474842 100644
--- a/roles/docker-gitlab/tasks/main.yml
+++ b/roles/docker-gitlab/tasks/main.yml
@@ -87,14 +87,6 @@
     path: '{{ docker_projects_dir }}/docker-gitlab'
     force: "{{ docker_image_force_build }}"
 
-# Data volume image is now the same as the container image
-#- name: build image
-#  docker_image:
-#    image_name: '{{ gitlab_dv_image_name }}'
-#    image_tag: '{{ docker_image_tag }}'
-#    dockerfile_dir: '{{ docker_projects_dir }}/docker-gitlab'
-#    force: "{{ docker_image_force_build }}"
-
 # *****************************************************************************
 # Create the data volumes
 
@@ -106,23 +98,6 @@
   docker_volume:
     name: '{{ gitlab_db_dv_name }}'
 
-- name: stop prev container (postgres)
-  docker_container:
-    image: '{{ gitlab_db_image_name }}'
-    name: '{{ gitlab_db_container_name }}'
-    state: stopped
-
-- name: initial populate (postgres)
-  docker_db_init:
-    image_name: '{{ gitlab_db_image_name }}'
-    image_tag: '{{ docker_image_tag }}'
-    container_name: '{{ gitlab_db_dv_name }}_init_db'
-    data_volume_container_name: '{{ gitlab_db_dv_name }}'
-    data_volume_dir: '{{ docker_projects_dir }}/docker-gitlab/postgres/'
-    database_name: gitlabhq_production
-    database_user: '{{ gitlab_db_user }}'
-    database_password: '{{ gitlab_db_password | quote }}'
-
 # *****************************************************************************
 # Start the data container running
 
@@ -131,7 +106,7 @@
     name: '{{ gitlab_redis_container_name }}'
     detach: true
     restart_policy: '{{ docker_restart_policy }}'
-    image: '{{ redis_image_name }}:{{ docker_image_tag }}'
+    image: '{{ redis_image_name }}:{{ redis_image_tag }}'
     networks:
       - name: '{{ docker_network_frontend }}'
 
@@ -140,10 +115,25 @@
     name: '{{ gitlab_db_container_name }}'
     detach: true
     restart_policy: '{{ docker_restart_policy }}'
-    volumes_from: '{{ gitlab_db_dv_name }}'
-    image: '{{ gitlab_db_image_name }}:{{ docker_image_tag }}'
+    volumes:
+    - '{{ gitlab_db_dv_name }}:/var/lib/postgresql/data'
+    image: '{{ gitlab_db_image_name }}:{{ gitlab_db_image_tag }}'
     networks:
-      - name: '{{ docker_network_frontend }}'
+    - name: '{{ docker_network_frontend }}'
+    env:
+      POSTGRES_DB: "gitlabhq_production"
+      POSTGRES_USER: "{{ gitlab_db_user }}"
+      POSTGRES_PASSWORD: "{{ gitlab_db_password | quote }}"
+
+- name: Wait for container (postgres)
+  command: >
+    docker exec --user postgres
+    {{ gitlab_db_container_name }}
+    psql -l
+  register: output
+  retries: 10
+  delay: 3
+  until: output.rc == 0
 
 - name: start container (gitlab)
   docker_container:
@@ -154,29 +144,35 @@
     ports: '{{ gitlab_port_args }}'
     networks:
       - name: '{{ docker_network_frontend }}'
-    volumes-from:
-      - '{{ openssl_dv_name }}'
-      - '{{ gitlab_dv_name }}'
+    volumes:
+      - '{{ openssl_dv_name }}:/etc/ssl/private:ro'
+      - '{{ gitlab_dv_name }}:/home/git/data'
+      - '{{ gitlab_docker_backup_dir }}:/home/git/backups'
     env:
-      - GITLAB_HOST={{ gitlab_hostname }}
-      - GITLAB_SSH_HOST={{ gitlab_hostname }}
-      - DB_USER={{ gitlab_db_user }}
-      - DB_PASS={{ gitlab_db_password | quote }}
-      - SMTP_HOST={{ exim4_hostname }}
-      - SMTP_PASS={{ gitlab_email_password | quote }}
-      - LDAP_PASS={{ ldap_proxyagent_password | quote }}
-      - GITLAB_ROOT_PASSWORD={{ gitlab_root_password | quote }}
-      - GITLAB_SECRETS_DB_KEY_BASE={{ gitlab_secrets_db_key_base | quote }}
-    env-file: '{{ docker_projects_dir }}/docker-gitlab/gitlab.env.list'
+      DEBUG_ENTRYPOINT: 1
+      GITLAB_TIMEZONE: "America\\/Chicago"
+      GITLAB_HOST: "{{ gitlab_hostname }}"
+      GITLAB_SSH_HOST: "{{ gitlab_hostname }}"
+      DB_HOST: "{{ gitlab_db_container_name }}"
+      DB_USER: "{{ gitlab_db_user }}"
+      DB_PASS: "{{ gitlab_db_password | quote }}"
+      REDIS_HOST: "{{ gitlab_redis_container_name }}"
+      SMTP_HOST: "{{ exim4_hostname }}"
+      SMTP_PASS: "{{ gitlab_email_password | quote }}"
+      LDAP_PASS: "{{ openldap_proxyagent_password | quote }}"
+      GITLAB_ROOT_PASSWORD: "{{ gitlab_root_password | quote }}"
+      GITLAB_SECRETS_DB_KEY_BASE: "{{ gitlab_secrets_db_key_base | quote }}"
+      SSL_DHPARAM_PATH: /etc/ssl/private/dhparam.pem
+    env_file: '{{ docker_projects_dir }}/docker-gitlab/gitlab.env.list'
     image: '{{ gitlab_image_name }}:{{ docker_image_tag }}'
 
 - name: Wait for gitlab to be fully running
-  docker_health:
-    name: '{{ gitlab_container_name }}'
+  uri:
+    url: 'http://{{ gitlab_hostname }}/users/sign_in'
   register: health
   retries: 60
   delay: 5
-  until: health.Health.Status == "healthy"
+  until: health.status == 200
 
 # *****************************************************************************
 # restore?
diff --git a/roles/docker-gitlab/tasks/restore.yml b/roles/docker-gitlab/tasks/restore.yml
index fc4cc59c..c085a1d6 100644
--- a/roles/docker-gitlab/tasks/restore.yml
+++ b/roles/docker-gitlab/tasks/restore.yml
@@ -5,8 +5,9 @@
 # Get data from tape
 
 - name: find files
-  files_in_dir:
+  find:
     path: '{{ gitlab_docker_restore_dir }}'
+    file_type: any
   register: gitlab_backup
 
 - name: data from tape
@@ -16,11 +17,12 @@
     fileset: '{{ bacula_fileset }}'
     dest: '{{ bacula_dest }}'
     path_to_restore: '{{ gitlab_docker_backup_dir }}'
-  when: gitlab_backup.file_list == []
+  when: gitlab_backup.matched == 0
 
 - name: find files
-  files_in_dir:
+  find:
     path: '{{ gitlab_docker_restore_dir }}'
+    file_type: any
   register: gitlab_backup
 
 # - name: File permissions
@@ -35,19 +37,43 @@
 # *****************************************************************************
 # restore the gitlap backup
 
+- name: Copy backup files to container
+  copy:
+    remote_src: yes
+    src: '{{ item.path }}'
+    dest: '{{ gitlab_docker_backup_dir }}/'
+    owner: root
+    group: root
+    mode: 'u=rwx,g=rwx,o=rwx'
+  loop: "{{ gitlab_backup.files }}"
+
+- name: shut down gitlab services for restoration
+  command: >
+    docker exec {{ gitlab_container_name }}
+    supervisorctl stop {{ item }}
+  loop:
+  - unicorn
+  - sidekiq
+
 - name: gitlab restore script
-  command: '{{ docker_projects_dir }}/docker-gitlab/gitlab.sh restore'
-  args:
-    chdir: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/'
-  when: gitlab_backup.file_list != []
+  command: >
+    docker exec -u git {{ gitlab_container_name }}
+    bundle exec rake gitlab:backup:restore force=yes BACKUP="{{backup_file}}"
+  vars:
+    backup_file: '{{ (gitlab_backup.files | first)["path"] | basename | replace("_gitlab_backup.tar","") }}'
+
+- name: restart gitlab services
+  command: >
+    docker exec {{ gitlab_container_name }}
+    supervisorctl start all
 
 - name: Wait for gitlab to be fully running
-  docker_health:
-    name: '{{ gitlab_container_name }}'
+  uri:
+    url: 'http://{{ gitlab_hostname }}/users/sign_in'
   register: health
   retries: 60
   delay: 5
-  until: health.Health.Status == "healthy"
+  until: health.status == 200
 
 # *****************************************************************************
 # cleanup
diff --git a/roles/gitlab-omnibus-8/defaults/main.yml b/roles/gitlab-omnibus-8/defaults/main.yml
index 28fe3644..82ce3f1e 100644
--- a/roles/gitlab-omnibus-8/defaults/main.yml
+++ b/roles/gitlab-omnibus-8/defaults/main.yml
@@ -1,5 +1,7 @@
 ---
 
+gitlab_version: 8.8.0
+
 # The hostname passed as an envirnment variable into the container
 gitlab_ip_addr: '127.0.0.1'
 gitlab_hostname: git.example.com
diff --git a/roles/gitlab-omnibus-8/tasks/restore.yml b/roles/gitlab-omnibus-8/tasks/restore.yml
index aeeef7a4..0d9fb3b8 100644
--- a/roles/gitlab-omnibus-8/tasks/restore.yml
+++ b/roles/gitlab-omnibus-8/tasks/restore.yml
@@ -8,6 +8,7 @@
   find:
     path: '{{ gitlab_docker_restore_dir }}'
     file_type: any
+    pattern: '*_{{gitlab_version))_gitlab_backup.tar'
   register: gitlab_backup
 
 - name: data from tape
@@ -24,16 +25,17 @@
     path: '{{ gitlab_docker_restore_dir }}'
     file_type: any
     follow: yes
+    pattern: '*_{{gitlab_version))_gitlab_backup.tar'
   register: gitlab_backup
 
 - name: File permissions
   file:
-    path: '{{ gitlab_docker_restore_dir }}/{{ item }}'
+    path: '{{ item.path }}'
     state: touch
     owner: root
     group: root
     mode: 'u=rwx,g=rwx,o='
-  with_items: '{{ gitlab_backup.file_list | default([]) }}'
+  with_items: '{{ gitlab_backup.files | default([]) }}'
 
 # *****************************************************************************
 # restore the gitlab backup
diff --git a/roles/gitlab-omnibus-9/defaults/main.yml b/roles/gitlab-omnibus-9/defaults/main.yml
index 28fe3644..74e3a3a5 100644
--- a/roles/gitlab-omnibus-9/defaults/main.yml
+++ b/roles/gitlab-omnibus-9/defaults/main.yml
@@ -1,5 +1,7 @@
 ---
 
+gitlab_version: 9.5.0
+
 # The hostname passed as an envirnment variable into the container
 gitlab_ip_addr: '127.0.0.1'
 gitlab_hostname: git.example.com
diff --git a/roles/gitlab-sameersbn-8/defaults/main.yml b/roles/gitlab-sameersbn-8/defaults/main.yml
index 9dd5ea94..56d25e12 100644
--- a/roles/gitlab-sameersbn-8/defaults/main.yml
+++ b/roles/gitlab-sameersbn-8/defaults/main.yml
@@ -20,17 +20,19 @@ gitlab_db_user: novatech
 gitlab_image_repo: 'https://github.com/novatechweb/docker-gitlab.git'
 gitlab_image_name: 'sameersbn/gitlab:8.0.0'
 gitlab_dv_image_name: '{{ docker_registry_username }}/gitlab'
-gitlab_db_image_name: 'postgres:9.4'
-redis_image_name: 'redis:3.0'
+gitlab_db_image_name: 'postgres'
+gitlab_db_image_tag: '9.4'
+redis_image_name: 'redis'
+redis_image_tag: '3.0'
 
 # the name of the gitlab container
 gitlab_container_name: '{{ docker_name_prefix }}gitlab'
 
 # the name of the redis container for gitlab
-gitlab_redis_container_name: '{{ docker_name_prefix }}gitlab_redis'
+gitlab_redis_container_name: '{{ docker_name_prefix }}gitlab-redis'
 
 # the name of the postgres container for gitlab
-gitlab_db_container_name: '{{ docker_name_prefix }}gitlab_db'
+gitlab_db_container_name: '{{ docker_name_prefix }}gitlab-db'
 
 # the name of the data-volume used by the container
 gitlab_dv_name: '{{ docker_name_prefix }}gitlab_DV'
diff --git a/roles/gitlab-sameersbn-8/files/gitlab.env.list b/roles/gitlab-sameersbn-8/files/gitlab.env.list
deleted file mode 100644
index 0c77c578..00000000
--- a/roles/gitlab-sameersbn-8/files/gitlab.env.list
+++ /dev/null
@@ -1,199 +0,0 @@
-# quay.io/sameersbn/gitlab:8.1.0-2
-
-
-# DEBUG_ENTRYPOINT                          : Set this to true to enable entrypoint debugging.
-# GITLAB_HOST                               : The hostname of the GitLab server. Defaults to localhost
-#	### Set as --env GITLAB_HOST={{ container_addr_map.git.hostname }} ###
-# GITLAB_CI_HOST                            : If you are migrating from GitLab CI use this parameter to configure the redirection to the GitLab service so that your existing runners continue to work without any changes. No defaults.
-# GITLAB_PORT                               : The port of the GitLab server. This value indicates the public port on which the GitLab application will be accessible on the network and appropriately configures GitLab to generate the correct urls. It does not affect the port on which the internal nginx server will be listening on. Defaults to 443 if GITLAB_HTTPS=true, else defaults to 80.
-GITLAB_PORT=443
-# GITLAB_SECRETS_DB_KEY_BASE                : Used to encrypt build variables. Ensure that you don't lose it. You can generate one using pwgen -Bsv1 64. If you are migrating from GitLab CI, you need to set this value to the value of GITLAB_CI_SECRETS_DB_KEY_BASE. No defaults.
-# GITLAB_TIMEZONE                           : Configure the timezone for the gitlab application. This configuration does not effect cron jobs. Defaults to UTC. See the list of acceptable values.
-GITLAB_TIMEZONE=America\/Chicago
-# GITLAB_ROOT_PASSWORD                      : The password for the root user. Defaults to 5iveL!fe.
-# GITLAB_EMAIL                              : The email address for the GitLab server. Defaults to value of SMTP_USER, else defaults to example@example.com.
-GITLAB_EMAIL=gitlab@novatech-llc.com
-# GITLAB_EMAIL_DISPLAY_NAME                 : The name displayed in emails sent out by the GitLab mailer. Defaults to GitLab.
-GITLAB_EMAIL_DISPLAY_NAME=GitLab
-# GITLAB_EMAIL_REPLY_TO                     : The reply-to address of emails sent out by GitLab. Defaults to value of GITLAB_EMAIL, else defaults to noreply@example.com.
-GITLAB_EMAIL_REPLY_TO=noreply@novatech-llc.com
-# GITLAB_EMAIL_ENABLED                      : Enable or disable gitlab mailer. Defaults to the SMTP_ENABLED configuration.
-GITLAB_EMAIL_ENABLED=True
-# GITLAB_INCOMING_EMAIL_ADDRESS             : The incoming email address for reply by email. Defaults to the value of IMAP_USER, else defaults to reply@example.com.
-# GITLAB_INCOMING_EMAIL_ENABLED             : Enable or disable gitlab reply by email feature. Defaults to the value of IMAP_ENABLED.
-# GITLAB_USERNAME_CHANGE                    : Enable or disable ability for users to change their username. Defaults is true.
-GITLAB_USERNAME_CHANGE=true
-# GITLAB_CREATE_GROUP                       : Enable or disable ability for users to create groups. Defaults is true.
-GITLAB_CREATE_GROUP=true
-# GITLAB_PROJECTS_ISSUES                    : Set if issues feature should be enabled by default for new projects. Defaults is true.
-GITLAB_PROJECTS_ISSUES=true
-# GITLAB_PROJECTS_MERGE_REQUESTS            : Set if merge requests feature should be enabled by default for new projects. Defaults is true.
-GITLAB_PROJECTS_MERGE_REQUESTS=true
-# GITLAB_PROJECTS_WIKI                      : Set if wiki feature should be enabled by default for new projects. Defaults is true.
-GITLAB_PROJECTS_WIKI=false
-# GITLAB_PROJECTS_SNIPPETS                  : Set if snippets feature should be enabled by default for new projects. Defaults is false.
-GITLAB_PROJECTS_SNIPPETS=true
-# GITLAB_WEBHOOK_TIMEOUT                    : Sets the timeout for webhooks. Defaults to 10 seconds.
-# GITLAB_SATELLITES_TIMEOUT                 : Sets the timeout for satellites. Defaults to 30 seconds.
-# GITLAB_TIMEOUT                            : Sets the timeout for git commands. Defaults to 10 seconds.
-# GITLAB_NOTIFY_ON_BROKEN_BUILDS            : Enable or disable broken build notification emails. Defaults to true
-# GITLAB_NOTIFY_PUSHER                      : Add pusher to recipients list of broken build notification emails. Defaults to false
-# GITLAB_REPOS_DIR                          : The git repositories folder in the container. Defaults to /home/git/data/repositories
-# GITLAB_BACKUP_DIR                         : The backup folder in the container. Defaults to /home/git/data/backups
-GITLAB_BACKUP_DIR=/home/git/backups
-# GITLAB_BUILDS_DIR                         : The build traces directory. Defaults to /home/git/data/builds
-GITLAB_BUILDS_DIR=/home/git/builds
-# GITLAB_BACKUPS                            : Setup cron job to automatic backups. Possible values disable, daily, weekly or monthly. Disabled by default
-GITLAB_BACKUPS=disable
-# GITLAB_BACKUP_EXPIRY                      : Configure how long (in seconds) to keep backups before they are deleted. By default when automated backups are disabled backups are kept forever (0 seconds), else the backups expire in 7 days (604800 seconds).
-GITLAB_BACKUP_EXPIRY=3600
-# GITLAB_BACKUP_ARCHIVE_PERMISSIONS         : Sets the permissions of the backup archives. Defaults to 0600. See
-# GITLAB_BACKUP_TIME                        : Set a time for the automatic backups in HH:MM format. Defaults to 04:00.
-GITLAB_BACKUP_TIME=23:00
-# GITLAB_SSH_HOST                           : The ssh host. Defaults to GITLAB_HOST.
-#	### Set as --env GITLAB_SSH_HOST={{ container_addr_map.git.hostname }} ###
-# GITLAB_SSH_PORT                           : The ssh port number. Defaults to 22.
-GITLAB_SSH_PORT=22
-# GITLAB_RELATIVE_URL_ROOT                  : The relative url of the GitLab server, e.g. /git. No default.
-# GITLAB_HTTPS                              : Set to true to enable https support, disabled by default.
-GITLAB_HTTPS=true
-# GITLAB_HTTPS_HSTS_ENABLED                 : Advanced configuration option for turning off the HSTS configuration. Applicable only when SSL is in use. Defaults to true. See #138 for use case scenario.
-GITLAB_HTTPS_HSTS_ENABLED=true
-# GITLAB_HTTPS_HSTS_MAXAGE                  : Advanced configuration option for setting the HSTS max-age in the gitlab nginx vHost configuration. Applicable only when SSL is in use. Defaults to 31536000.
-GITLAB_HTTPS_HSTS_MAXAGE=31536000
-# SSL_SELF_SIGNED                           : Set to true when using self signed ssl certificates. false by default.
-SSL_SELF_SIGNED=false
-# SSL_CERTIFICATE_PATH                      : Location of the ssl certificate. Defaults to /home/git/data/certs/gitlab.crt
-SSL_CERTIFICATE_PATH=/home/git/data/certs/nginx.crt
-# SSL_KEY_PATH                              : Location of the ssl private key. Defaults to /home/git/data/certs/gitlab.key
-SSL_KEY_PATH=/home/git/data/certs/nginx.key
-# SSL_DHPARAM_PATH                          : Location of the dhparam file. Defaults to /home/git/data/certs/dhparam.pem
-SSL_DHPARAM_PATH=/home/git/data/certs/dhparam.pem
-# SSL_VERIFY_CLIENT                         : Enable verification of client certificates using the CA_CERTIFICATES_PATH file. Defaults to false
-SSL_VERIFY_CLIENT=off
-# CA_CERTIFICATES_PATH                      : List of SSL certificates to trust. Defaults to /home/git/data/certs/ca.crt.
-CA_CERTIFICATES_PATH=/etc/ssl/certs/ca-certificates.crt
-# NGINX_WORKERS                             : The number of nginx workers to start. Defaults to 1.
-# NGINX_PROXY_BUFFERING                     : Enable proxy_buffering. Defaults to off.
-# NGINX_ACCEL_BUFFERING                     : Enable X-Accel-Buffering header. Default to no
-# NGINX_MAX_UPLOAD_SIZE                     : Maximum acceptable upload size. Defaults to 20m.
-# NGINX_X_FORWARDED_PROTO                   : Advanced configuration option for the proxy_set_header X-Forwarded-Proto setting in the gitlab nginx vHost configuration. Defaults to https when GITLAB_HTTPS is true, else defaults to $scheme.
-# REDIS_HOST                                : The hostname of the redis server. Defaults to localhost
-REDIS_HOST=gitlab-redis
-# REDIS_PORT                                : The connection port of the redis server. Defaults to 6379.
-REDIS_PORT=6379
-# UNICORN_WORKERS                           : The number of unicorn workers to start. Defaults to 3.
-# UNICORN_TIMEOUT                           : Sets the timeout of unicorn worker processes. Defaults to 60 seconds.
-# SIDEKIQ_CONCURRENCY                       : The number of concurrent sidekiq jobs to run. Defaults to 25
-# SIDEKIQ_SHUTDOWN_TIMEOUT                  : Timeout for sidekiq shutdown. Defaults to 4
-# SIDEKIQ_MEMORY_KILLER_MAX_RSS             : Non-zero value enables the SidekiqMemoryKiller. Defaults to 1000000. For additional options refer Configuring the MemoryKiller
-# DB_TYPE                                   : The database type. Possible values: mysql, postgres. Defaults to postgres.
-DB_TYPE=postgres
-# DB_HOST                                   : The database server hostname. Defaults to localhost.
-DB_HOST=gitlab-db
-# DB_PORT                                   : The database server port. Defaults to 3306 for mysql and 5432 for postgresql.
-DB_PORT=5432
-# DB_NAME                                   : The database database name. Defaults to gitlabhq_production
-DB_NAME=gitlabhq_production
-# DB_USER                                   : The database database user. Defaults to root
-#	### Set as --env DB_USER={{ gitlab_db_user }} ###
-# DB_PASS                                   : The database database password. Defaults to no password
-#	### Set as --env DB_PASS={{ gitlab_db_password | quote }} ###
-# DB_POOL                                   : The database database connection pool count. Defaults to 10.
-# SMTP_ENABLED                              : Enable mail delivery via SMTP. Defaults to true if SMTP_USER is defined, else defaults to false.
-SMTP_ENABLED=true
-# SMTP_DOMAIN                               : SMTP domain. Defaults towww.gmail.com
-SMTP_DOMAIN=novatech-llc.com
-# SMTP_HOST                                 : SMTP server host. Defaults to smtp.gmail.com.
-#	### Set as --env SMTP_HOST={{ container_addr_map.exim4.hostname }} ###
-# SMTP_PORT                                 : SMTP server port. Defaults to 587.
-# SMTP_USER                                 : SMTP username.
-SMTP_USER=gitlab
-# SMTP_PASS                                 : SMTP password.
-#	### Set as --env SMTP_PASS={{ email_accounts.gitlab.password | quote }} ###
-# SMTP_STARTTLS                             : Enable STARTTLS. Defaults to true.
-SMTP_STARTTLS=true
-# SMTP_TLS                                  : Enable SSL/TLS. Defaults to false.
-SMTP_TLS=false
-# SMTP_OPENSSL_VERIFY_MODE                  : SMTP openssl verification mode. Accepted values are none, peer, client_once and fail_if_no_peer_cert. Defaults to none.
-SMTP_OPENSSL_VERIFY_MODE=none
-# SMTP_AUTHENTICATION                       : Specify the SMTP authentication method. Defaults to login if SMTP_USER is set.
-SMTP_AUTHENTICATION=plain
-# SMTP_CA_ENABLED                           : Enable custom CA certificates for SMTP email configuration. Defaults to false.
-# SMTP_CA_PATH                              : Specify the ca_path parameter for SMTP email configuration. Defaults to /home/git/data/certs.
-# SMTP_CA_FILE                              : Specify the ca_file parameter for SMTP email configuration. Defaults to /home/git/data/certs/ca.crt.
-# IMAP_ENABLED                              : Enable mail delivery via IMAP. Defaults to true if IMAP_USER is defined, else defaults to false.
-# IMAP_HOST                                 : IMAP server host. Defaults to imap.gmail.com.
-# IMAP_PORT                                 : IMAP server port. Defaults to 993.
-# IMAP_USER                                 : IMAP username.
-# IMAP_PASS                                 : IMAP password.
-# IMAP_SSL                                  : Enable SSL. Defaults to true.
-# IMAP_STARTTLS                             : Enable STARTSSL. Defaults to false.
-# IMAP_MAILBOX                              : The name of the mailbox where incoming mail will end up. Defaults to inbox.
-# LDAP_ENABLED                              : Enable LDAP. Defaults to false
-LDAP_ENABLED=true
-# LDAP_LABEL                                : Label to show on login tab for LDAP server. Defaults to 'LDAP'
-LDAP_LABEL=NovaTech
-# # LDAP_HOST                                 : LDAP Host
-LDAP_HOST=ldap.novatech-llc.com
-# LDAP_PORT                                 : LDAP Port. Defaults to 389
-LDAP_PORT=389
-# LDAP_UID                                  : LDAP UID. Defaults to sAMAccountName
-LDAP_UID=uid
-# LDAP_METHOD                               : LDAP method, Possible values are ssl, tls and plain. Defaults to plain
-LDAP_METHOD=plain
-# LDAP_BIND_DN                              : No default.
-LDAP_BIND_DN=cn=proxyagent,dc=novatech
-# LDAP_PASS                                 : LDAP password
-# LDAP_ACTIVE_DIRECTORY                     : Specifies if LDAP server is Active Directory LDAP server. If your LDAP server is not AD, set this to false. Defaults to true,
-LDAP_ACTIVE_DIRECTORY=false
-# LDAP_ALLOW_USERNAME_OR_EMAIL_LOGIN        : If enabled, GitLab will ignore everything after the first '@' in the LDAP username submitted by the user on login. Defaults to false if LDAP_UID is userPrincipalName, else true.
-LDAP_ALLOW_USERNAME_OR_EMAIL_LOGIN=true
-# LDAP_BLOCK_AUTO_CREATED_USERS             : Locks down those users until they have been cleared by the admin. Defaults to false.
-LDAP_BLOCK_AUTO_CREATED_USERS=false
-# LDAP_BASE                                 : Base where we can search for users. No default.
-LDAP_BASE=ou=user,dc=novatech
-# LDAP_USER_FILTER                          : Filter LDAP users. No default.
-LDAP_USER_FILTER=(employeeType=gitlab)
-# OAUTH_ENABLED                             : Enable OAuth support. Defaults to true if any of the support OAuth providers is configured, else defaults to false.
-# OAUTH_AUTO_SIGN_IN_WITH_PROVIDER          : Automatically sign in with a specific OAuth provider without showing GitLab sign-in page. Accepted values are google_oauth2, twitter, github, gitlab, bitbucket and saml. No default.
-# OAUTH_ALLOW_SSO                           : This allows users to login without having a user account first. User accounts will be created automatically when authentication was successful. Defaults to false.
-OAUTH_ALLOW_SSO=false
-# OAUTH_BLOCK_AUTO_CREATED_USERS            : Locks down those users until they have been cleared by the admin. Defaults to true.
-# OAUTH_AUTO_LINK_LDAP_USER                 : Look up new users in LDAP servers. If a match is found (same uid), automatically link the omniauth identity with the LDAP account. Defaults to false.
-# OAUTH_GOOGLE_API_KEY                      : Google App Client ID. No defaults.
-# OAUTH_GOOGLE_APP_SECRET                   : Google App Client Secret. No defaults.
-# OAUTH_GOOGLE_RESTRICT_DOMAIN              : Google App restricted domain. No defaults.
-# OAUTH_TWITTER_API_KEY                     : Twitter App API key. No defaults.
-# OAUTH_TWITTER_APP_SECRET                  : Twitter App API secret. No defaults.
-# OAUTH_GITHUB_API_KEY                      : GitHub App Client ID. No defaults.
-# OAUTH_GITHUB_APP_SECRET                   : GitHub App Client secret. No defaults.
-# OAUTH_GITLAB_API_KEY                      : GitLab App Client ID. No defaults.
-# OAUTH_GITLAB_APP_SECRET                   : GitLab App Client secret. No defaults.
-# OAUTH_BITBUCKET_API_KEY                   : BitBucket App Client ID. No defaults.
-# OAUTH_BITBUCKET_APP_SECRET                : BitBucket App Client secret. No defaults.
-# OAUTH_SAML_ASSERTION_CONSUMER_SERVICE_URL : The URL at which the SAML assertion should be received. When GITLAB_HTTPS=true, defaults to https://${GITLAB_HOST}/users/auth/saml/callback else defaults to http://${GITLAB_HOST}/users/auth/saml/callback.
-# OAUTH_SAML_IDP_CERT_FINGERPRINT           : The SHA1 fingerprint of the certificate. No Defaults.
-# OAUTH_SAML_IDP_SSO_TARGET_URL             : The URL to which the authentication request should be sent. No defaults.
-# OAUTH_SAML_ISSUER                         : The name of your application. When GITLAB_HTTPS=true, defaults to https://${GITLAB_HOST} else defaults to http://${GITLAB_HOST}.
-# OAUTH_SAML_NAME_IDENTIFIER_FORMAT         : Describes the format of the username required by GitLab, Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
-# OAUTH_CROWD_SERVER_URL                    : Crowd server url. No defaults.
-# OAUTH_CROWD_APP_NAME                      : Crowd server application name. No defaults.
-# OAUTH_CROWD_APP_PASSWORD                  : Crowd server application password. No defaults.
-# GITLAB_GRAVATAR_ENABLED                   : Enables gravatar integration. Defaults to true.
-GITLAB_GRAVATAR_ENABLED=true
-# GITLAB_GRAVATAR_HTTP_URL                  : Sets a custom gravatar url. Defaults to http://www.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon. This can be used for Libravatar integration.
-GITLAB_GRAVATAR_HTTP_URL=http://cdn.libravatar.org/avatar/%{hash}?s=%{size}&d=identicon
-# GITLAB_GRAVATAR_HTTPS_URL                 : Same as above, but for https. Defaults to https://secure.gravatar.com/avatar/%{hash}?s=%{size}&d=identicon.
-GITLAB_GRAVATAR_HTTPS_URL=https://seccdn.libravatar.org/avatar/%{hash}?s=%{size}&d=identicon
-# USERMAP_UID                               : Sets the uid for user git to the specified uid. Defaults to 1000.
-# USERMAP_GID                               : Sets the gid for group git to the specified gid. Defaults to USERMAP_UID if defined, else defaults to 1000.
-# GOOGLE_ANALYTICS_ID                       : Google Analytics ID. No defaults.
-# PIWIK_URL                                 : Sets the Piwik URL. No defaults.
-# PIWIK_SITE_ID                             : Sets the Piwik site ID. No defaults.
-# AWS_BACKUPS                               : Enables automatic uploads to an Amazon S3 instance. Defaults to false.
-# AWS_BACKUP_REGION                         : AWS region. No defaults.
-# AWS_BACKUP_ACCESS_KEY_ID                  : AWS access key id. No defaults.
-# AWS_BACKUP_SECRET_ACCESS_KEY              : AWS secret access key. No defaults.
-# AWS_BACKUP_BUCKET                         : AWS bucket for backup uploads. No defaults.
-# GITLAB_ROBOTS_PATH                        : Location of custom robots.txt. Uses GitLab's default robots.txt configuration by default. See www.robotstxt.org for examples.
diff --git a/roles/gitlab-sameersbn-8/files/secrets.yml b/roles/gitlab-sameersbn-8/files/secrets.yml
new file mode 100644
index 00000000..cc5d119d
--- /dev/null
+++ b/roles/gitlab-sameersbn-8/files/secrets.yml
@@ -0,0 +1,12 @@
+production:
+  # db_key_base is used to encrypt for Variables. Ensure that you don't lose it.
+  # If you change or lose this key you will be unable to access variables stored in database.
+  # Make sure the secret is at least 30 characters and all random,
+  # no regular words or you'll be exposed to dictionary attacks.
+  db_key_base: '{{GITLAB_SECRETS_DB_KEY_BASE}}'
+
+development:
+  db_key_base: development
+
+test:
+  db_key_base: test
diff --git a/roles/gitlab-sameersbn-8/tasks/main.yml b/roles/gitlab-sameersbn-8/tasks/main.yml
index 6c156578..6699d849 100644
--- a/roles/gitlab-sameersbn-8/tasks/main.yml
+++ b/roles/gitlab-sameersbn-8/tasks/main.yml
@@ -8,15 +8,15 @@
 # *****************************************************************************
 # Setup the directory where the backup and restore is to take place
 
-- name: restore dir
-  file:
-    state: directory
-    path: '{{ gitlab_docker_restore_dir }}'
-    owner: root
-    group: tape
-    mode: 'u=rwx,g=rwx,o=rx'
-    recurse: no
-    setype: svirt_sandbox_file_t
+# - name: restore dir
+#   file:
+#     state: directory
+#     path: '{{ gitlab_docker_restore_dir }}'
+#     owner: root
+#     group: tape
+#     mode: 'u=rwx,g=rwx,o=rx'
+#     recurse: no
+#     setype: svirt_sandbox_file_t
 
 - name: docker_container.conf dir
   file:
@@ -30,31 +30,33 @@
 # *****************************************************************************
 # backup script part
 
-- name: Assemble dir for backup scripts
-  file:
-    path: /usr/libexec/bacula/backup-scripts
-    state: directory
+# - name: Assemble dir for backup scripts
+#   file:
+#     path: /usr/libexec/bacula/backup-scripts
+#     state: directory
 
-- name: before_backup script part
-  template:
-    src: before_backup.j2
-    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab
+# - name: before_backup script part
+#   template:
+#     src: before_backup.j2
+#     dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab
 
-- name: after_backup script part
-  template:
-    src: after_backup.j2
-    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab
+# - name: after_backup script part
+#   template:
+#     src: after_backup.j2
+#     dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab
 
 # *****************************************************************************
 # update the Docker restore config
 
-- name: copy env-file
-  copy:
-    src: gitlab.env.list
-    dest: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/gitlab.env.list'
-    owner: root
-    group: root
-    mode: 'u=r,g=r,o='
+# contains the database username and password
+# - name: make config.sh
+#   template:
+#     src: config.sh.j2
+#     dest: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/config.sh'
+#     backup: yes
+#     owner: root
+#     group: tape
+#     mode: 'u=rw,g=r,o='
 
 - name: exists - state file
   stat:
@@ -63,6 +65,36 @@
     get_md5: False
   register: st_gitlab_restore
 
+# *****************************************************************************
+# upgrade?
+
+- include_tasks: upgrade.yml
+  when:
+  - upgrade == True
+  - st_gitlab_restore.stat.exists == False
+
+# *****************************************************************************
+# Update or make the image.
+
+- name: Checkout image repo
+  git:
+    repo: '{{ gitlab_image_repo }}'
+    version: master
+    dest: '{{ docker_projects_dir }}/docker-gitlab'
+
+- name: copy env-file
+  command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.env.list {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'
+
+# - name: copy script
+#   command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.sh {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'
+
+# - name: build image
+#   docker_image:
+#     name: '{{ gitlab_image_name }}'
+#     tag: '{{ docker_image_tag }}'
+#     path: '{{ docker_projects_dir }}/docker-gitlab'
+#     force: "{{ docker_image_force_build }}"
+
 # *****************************************************************************
 # Create the data volumes
 
@@ -82,7 +114,7 @@
     name: '{{ gitlab_redis_container_name }}'
     detach: true
     restart_policy: '{{ docker_restart_policy }}'
-    image: '{{ redis_image_name }}'
+    image: '{{ redis_image_name }}:{{ redis_image_tag }}'
     networks:
       - name: '{{ docker_network_frontend }}'
 
@@ -93,23 +125,25 @@
     restart_policy: '{{ docker_restart_policy }}'
     volumes:
     - '{{ gitlab_db_dv_name }}:/var/lib/postgresql/data'
-    image: '{{ gitlab_db_image_name }}'
+    image: '{{ gitlab_db_image_name }}:{{ gitlab_db_image_tag }}'
     networks:
     - name: '{{ docker_network_frontend }}'
     env:
-    - POSTGRES_DB=gitlabhq_production
-    - POSTGRES_USER='{{ gitlab_db_user }}'
-    - POSTGRES_PASSWORD='{{ gitlab_db_password | quote }}'
+      POSTGRES_DB: "gitlabhq_production"
+      POSTGRES_USER: "{{ gitlab_db_user }}"
+      POSTGRES_PASSWORD: "{{ gitlab_db_password | quote }}"
 
 - name: Wait for container (postgres)
   command: >
     docker exec --user postgres
     {{ gitlab_db_container_name }}
     psql -l
+  register: output
   retries: 10
   delay: 3
+  until: output.rc == 0
 
-- name: start container (gitlab)
+- name: create container (gitlab)
   docker_container:
     name: '{{ gitlab_container_name }}'
     detach: true
@@ -119,30 +153,57 @@
     networks:
     - name: '{{ docker_network_frontend }}'
     volumes:
-    - '{{ openssl_dv_name }}:/home/git/data/certs:ro'
+    - '{{ openssl_dv_name }}:/etc/ssl/private:ro'
     - '{{ gitlab_dv_name }}:/home/git/data'
-    - '{{ gitlab_docker_backup_dir }}:/mnt/backups'
+    - '{{ gitlab_docker_backup_dir }}:/home/git/backups'
     env:
-    - GITLAB_TIMEZONE=America/Chicago
-    - GITLAB_HOST={{ gitlab_hostname }}
-    - GITLAB_SSH_HOST={{ gitlab_hostname }}
-    - DB_USER={{ gitlab_db_user }}
-    - DB_PASS={{ gitlab_db_password | quote }}
-    - SMTP_HOST={{ exim4_hostname }}
-    - SMTP_PASS={{ gitlab_email_password | quote }}
-    - LDAP_PASS={{ ldap_proxyagent_password | quote }}
-    - GITLAB_ROOT_PASSWORD={{ gitlab_root_password | quote }}
-    - GITLAB_SECRETS_DB_KEY_BASE={{ gitlab_secrets_db_key_base | quote }}
-    env-file: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/gitlab.env.list'
+      DEBUG: 'true'
+      GITLAB_TIMEZONE: "America/Chicago"
+      GITLAB_HOST: "{{ gitlab_hostname }}"
+      GITLAB_SSH_HOST: "{{ gitlab_hostname }}"
+      DB_HOST: "{{ gitlab_db_container_name }}"
+      DB_USER: "{{ gitlab_db_user }}"
+      DB_PASS: "{{ gitlab_db_password | quote }}"
+      REDIS_HOST: "{{ gitlab_redis_container_name }}"
+      SMTP_HOST: "{{ exim4_hostname }}"
+      SMTP_PASS: "{{ gitlab_email_password | quote }}"
+      LDAP_PASS: "{{ openldap_proxyagent_password | quote }}"
+      GITLAB_ROOT_PASSWORD: "{{ gitlab_root_password | quote }}"
+      GITLAB_SECRETS_DB_KEY_BASE: "{{ gitlab_secrets_db_key_base | quote }}"
+      SSL_DHPARAM_PATH: /etc/ssl/private/dhparam.pem
+    env_file: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/gitlab.env.list'
     image: '{{ gitlab_image_name }}'
+    state: present
+
+- name: copy updated secrets.yml to gitlab
+  block:
+  - copy:
+      src: secrets.yml
+      dest: /tmp/secrets.yml
+  - command: >
+      docker cp /tmp/secrets.yml
+      "{{gitlab_container_name}}:/etc/docker-gitlab/runtime/config/gitlabhq/secrets.yml"
+  
+- name: start container (gitlab)
+  docker_container:
+    name: '{{ gitlab_container_name }}'
+    state: started
 
 - name: Wait for gitlab to be fully running
-  wait_for:
-    delay: 10
-    host: '{{ gitlab_network.ip_addr }}'
-    port: 22
-    state: started
-    timeout: 180
+  uri:
+    url: 'http://{{ gitlab_hostname }}/users/sign_in'
+  register: health
+  retries: 60
+  delay: 5
+  until: health.status == 200
+
+# *****************************************************************************
+# Create container registry directory
+- name: Create container registry directory
+  command: >
+    docker exec -u git {{gitlab_container_name}} mkdir -p /home/git/data/shared/registry
+
+
 
 # *****************************************************************************
 # restore?
diff --git a/roles/gitlab-sameersbn-8/tasks/upgrade.yml b/roles/gitlab-sameersbn-8/tasks/upgrade.yml
new file mode 100644
index 00000000..3f03ba2c
--- /dev/null
+++ b/roles/gitlab-sameersbn-8/tasks/upgrade.yml
@@ -0,0 +1,32 @@
+---
+
+- assert:
+    that: old_prefix is defined
+
+- name: Shut down old version
+  docker_container: 
+    name: '{{ old_prefix }}{{ item }}'
+    state: stopped
+  loop:
+  - gitlab
+  - gitlab-redis
+  - gitlab-db
+
+- name: Clone volumes
+  docker_volume_clone:
+    src: '{{old_prefix}}{{item}}'
+    dest: '{{ docker_name_prefix }}{{item}}'
+  loop:
+  - gitlab_DV
+  - gitlab_db_DV
+
+- name: State file
+  shell: 'date --rfc-3339=seconds > {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/restore.date.txt'
+  when: st_gitlab_restore.stat.exists == False
+
+- name: exists - state file
+  stat:
+    path: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/restore.date.txt'
+    get_checksum: False
+    get_md5: False
+  register: st_gitlab_restore
diff --git a/roles/gitlab-sameersbn-8/vars/main.yml b/roles/gitlab-sameersbn-8/vars/main.yml
index 56d0699a..ed97d539 100644
--- a/roles/gitlab-sameersbn-8/vars/main.yml
+++ b/roles/gitlab-sameersbn-8/vars/main.yml
@@ -1,2 +1 @@
 ---
-docker_name_prefix: '{{gitlab_version}}_'
diff --git a/upgrade.sh b/upgrade.sh
new file mode 100755
index 00000000..1f3eba47
--- /dev/null
+++ b/upgrade.sh
@@ -0,0 +1,14 @@
+#! /bin/bash
+
+#PYTHONUNBUFFERED=1 \
+     
+ANSIBLE_ENABLE_TASK_DEBUGGER=True \
+ANSIBLE_FORCE_COLOR=true \
+ANSIBLE_HOST_KEY_CHECKING=false \
+ANSIBLE_SSH_ARGS='-o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -o ControlMaster=auto -o ControlPersist=60s' \
+exec ansible-playbook \
+        --connection=ssh \
+        --timeout=30 \
+        --inventory-file=ansible-playbook/staging \
+        -vv \
+        ansible-playbook/gitlab.yml "$@"
