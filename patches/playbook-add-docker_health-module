Bottom: 590047138e1b4bd701739fb7f12edd5a76fd36e7
Top:    f355a18a11da9eb270a27313fea7cd82ed693840
Author: Andrew Cooper <andrew.cooper@novatechweb.com>
Date:   2018-06-07 13:59:04 -0500

Add new module docker_health


---
diff --git a/ansible-playbook/library/docker_health.py b/ansible-playbook/library/docker_health.py
new file mode 100644
index 00000000..57cf6357
--- /dev/null
+++ b/ansible-playbook/library/docker_health.py
@@ -0,0 +1,126 @@
+#!/usr/bin/python
+#
+# Copyright 2016 Red Hat | Ansible
+# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
+
+from __future__ import absolute_import, division, print_function
+__metaclass__ = type
+
+
+ANSIBLE_METADATA = {'metadata_version': '1.1',
+                    'status': ['preview'],
+                    'supported_by': 'community'}
+
+
+DOCUMENTATION = '''
+---
+module: docker_health
+
+short_description: Get health of Docker container
+
+version_added: "2.5.0"
+
+description:
+     - Provide one container identifier, and the module will inspect it,
+       returning a dictionary of health information.
+
+options:
+  name:
+    description:
+      - A container name or id, as you would pass to 'docker inspect'
+    required: true
+
+extends_documentation_fragment:
+    - docker
+
+requirements:
+  - "python >= 2.6"
+  - "docker-py >= 1.7.0"
+  - "Docker API >= 1.20"
+
+author:
+  - Andrew Cooper (me@andrewcooper.me)
+
+'''
+
+EXAMPLES = '''
+
+- name: Get health for a container
+  docker_health:
+    name: mycontainer
+
+- name: Wait for a container to become healthy
+  docker_health:
+    name: mycontainer
+    register: health
+    retries: 10
+    delay: 3
+    until: '{{ health.Heath.Status }} is "healthy"'
+'''
+
+RETURN = '''
+'''
+
+try:
+    from docker import utils
+except ImportError:
+    # missing docker-py handled in docker_common
+    pass
+
+from ansible.module_utils.docker_common import AnsibleDockerClient, DockerBaseClass
+
+
+class ContainerManager(DockerBaseClass):
+
+    def __init__(self, client):
+
+        super(ContainerManager, self).__init__()
+
+        self.client = client
+        self.name = self.client.module.params.get('name')
+        self.log("Gathering facts for images: %s" % (str(self.name)))
+
+        self.results = self.get_state()
+
+    def fail(self, msg):
+        self.client.fail(msg)
+
+    def get_state(self):
+        '''
+        Lookup and inspect the container name.
+
+        :returns dictionary of state information
+        '''
+
+        inspection = self.client.inspect_container(self.name)
+        state = inspection['State']
+        if 'Health' not in state:
+            state['Health'] = {
+                'Status': 'starting',
+                'Log': list(),
+                'FailingStreak': 0
+            }
+            if state['Status'] == 'running':
+                state['Health']['Status'] = 'healthy'
+
+        state['changed'] = False
+        state['failed'] = False
+        return state
+
+
+def main():
+    argument_spec = dict(
+        name=dict(type='str', required=True),
+
+    )
+
+    client = AnsibleDockerClient(
+        argument_spec=argument_spec
+    )
+
+    cm = ContainerManager(client)
+    client.module.exit_json(**cm.results)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/roles/docker-gitlab/tasks/main.yml b/roles/docker-gitlab/tasks/main.yml
index a2b696f8..4b5912f2 100644
--- a/roles/docker-gitlab/tasks/main.yml
+++ b/roles/docker-gitlab/tasks/main.yml
@@ -171,12 +171,12 @@
     image: '{{ gitlab_image_name }}:{{ docker_image_tag }}'
 
 - name: Wait for gitlab to be fully running
-  wait_for:
-    delay: 10
-    host: '{{ gitlab_network.ip_addr }}'
-    port: 22
-    state: started
-    timeout: 180
+  docker_health:
+    name: '{{ gitlab_container_name }}'
+  register: health
+  retries: 60
+  delay: 5
+  until: health.Health.Status == "healthy"
 
 # *****************************************************************************
 # restore?
diff --git a/roles/docker-gitlab/tasks/restore.yml b/roles/docker-gitlab/tasks/restore.yml
index b9f74ee0..f553ff0c 100644
--- a/roles/docker-gitlab/tasks/restore.yml
+++ b/roles/docker-gitlab/tasks/restore.yml
@@ -41,6 +41,14 @@
     chdir: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/'
   when: gitlab_backup.file_list != []
 
+- name: Wait for gitlab to be fully running
+  docker_health:
+    name: '{{ gitlab_container_name }}'
+  register: health
+  retries: 60
+  delay: 5
+  until: health.Health.Status == "healthy"
+
 # *****************************************************************************
 # cleanup
