Bottom: 157e96e989dddeb2c576dffb74a1dfd65d0d4458
Top:    cbce487ed2aa589099f0ae1b0517d85066ae5cae
Author: Andrew Cooper <andrew.cooper@novatechweb.com>
Date:   2018-08-29 16:43:17 -0500

Update ptxdist build factories

---
diff --git a/ansible-playbook/buildbot.yml b/ansible-playbook/buildbot.yml
index 09779652..6c94f54e 100644
--- a/ansible-playbook/buildbot.yml
+++ b/ansible-playbook/buildbot.yml
@@ -22,6 +22,7 @@
     - buildbot
     - buildbot-worker
     - buildbot-worker-ntel
+    - buildbot-worker-ptxdist
   vars:
     buildbot_master: "{{ hostvars[buildbot_hostname].ip_addr }}"
   tasks:
@@ -29,5 +30,5 @@
       import_role:
         name: buildbot-worker-ntel
     - name: Build and start the Buildbot worker container
-      import_role: 
-      name: buildbot-worker-ptxdist
+      import_role:
+        name: buildbot-worker-ptxdist
diff --git a/roles/buildbot-master/files/ptxdist.py b/roles/buildbot-master/files/ptxdist.py
index d6d84f2e..c6e148cf 100644
--- a/roles/buildbot-master/files/ptxdist.py
+++ b/roles/buildbot-master/files/ptxdist.py
@@ -1,26 +1,39 @@
 import os
+import string
 from buildbot.plugins import *
+from datetime import datetime
+from buildbot.config import BuilderConfig
+
+c = WorkerConfig = {}
+
+DEFAULT_BRANCH = 'master'
+DEFAULT_REPO = 'git@git.novatech-llc.com:Orion-ptxdist/workspace-ptxdist2'
+ASSET_HOST = os.getenv("ASSET_HOST", default="http://127.0.0.1")
+
+collections = {
+    "armeb-xscale": "armeb-base",
+    "i686": "i686-base",
+    "am335x": "am335x-base",
+}
 
 # Workers
 # The 'workers' list defines the set of recognized buildworkers. Each element is
 # a Worker object, specifying a unique worker name and password.  The same
 # worker name and password must be configured on the worker.
 workers = [
-    worker.Worker("worker-ptxdist", "pass", max_builds=1),
-    worker.Worker("orion-i686-slave", "pass"),
-    worker.Worker("orion-armeb-xscale-slave", "pass"),
-    worker.Worker("orion-am335x-slave", "pass"),
+    worker.Worker("worker-ptxdist", "pass", max_builds=3),
+    worker.Worker("orion-i686-slave", "pass", max_builds=1),
+    worker.Worker("orion-armeb-xscale-slave", "pass", max_builds=1),
+    worker.Worker("orion-am335x-slave", "pass", max_builds=1),
 ]
 
-worker_ptxdist_repourl = 'git@git.novatech-llc.com:andrew.cooper/workspace-ptxdist2.git'
-worker_ptxdist_branch = 'docker-build'
 acceptance_test_repourl = 'git@git.novatech-llc.com:NovaTech-Testing/AcceptanceTests.git'
 
 # CHANGESOURCES
 change_source = [
     changes.GitPoller(
-        repourl=worker_ptxdist_repourl,
-        branches=['master'],
+        repourl=DEFAULT_REPO,
+        branches=[DEFAULT_BRANCH],
         project='ptxdist',
         workdir='gitpoller-ptxdist')
 ]
@@ -34,42 +47,56 @@ schedulers = [
     #                            treeStableTimer=9*60,
     # builderNames=["current_armeb_xscale","current_i686", "current_am335x"]))
 
-    # SingleBranchScheduler(
-    #                            name="linux-3.2",
-    #                            change_filter=filter.ChangeFilter(branch='branches/linux-3.2'),
-    #                            treeStableTimer=9*60,
-    #                            builderNames=["linux-3.2_armeb_xscale","linux-3.2_i686"]))
-    # SingleBranchScheduler(
-    #                            name="linux-3.8",
-    #                            change_filter=filter.ChangeFilter(branch='branches/linux-3.8'),
-    #                            treeStableTimer=9*60,
-    #                            builderNames=["linux-3.8_am335x"]))
     schedulers.ForceScheduler(
-        name="force-ptxdist",
+        name="ptxdist-force",
+        label="Force PTXdist Build",
         builderNames=[
-            "current_armeb_xscale",
-            "current_i686",
-            "current_am335x",
+            "force-armeb-xscale",
+            "force-i686",
+            "force-am335x",
+        ],
+        codebases=[
+            util.CodebaseParameter(
+                codebase="orion-ptxdist-workspace",
+                label="Build Source",
+                # will generate a combo box
+                repository=util.StringParameter(
+                    name="repository",
+                    default=DEFAULT_REPO),
+                branch=util.StringParameter(
+                    name="branch",
+                    default=DEFAULT_BRANCH),
+                revision=util.StringParameter(
+                    name="revision",
+                    default="")
+            )
         ],
         properties=[
+            util.StringParameter(
+                name="version",
+                label="distribution version",
+                default='',
+                required=True
+            ),
+            util.BooleanParameter(
+                name='release',
+                label="Make a release build",
+                default=False
+            ),
+            util.StringParameter(
+                name="packages",
+                label="space-delimited list of packages to build",
+                default='',
+                required=False,
+            ),
             util.BooleanParameter(
                 name="clobber",
                 label="Clobber build directory",
-                default=False),
+                default=False
+            ),
         ],
     ),
 
-    schedulers.Nightly(
-        name="ptxdist-nightly",
-        branch=None,
-        builderNames=[
-            "current_armeb_xscale",
-            "current_i686",
-            "current_am335x",
-        ],
-        hour=22
-    ),
-
     schedulers.Triggerable(
         name="upgrade_i686",
         builderNames=["upgrade_i686"]),
@@ -110,37 +137,107 @@ schedulers = [
 # only take place on one worker.
 
 
-class PTXDistBuildCounter(util.LogLineObserver):
-    numTargets = 0
-    numPackages = 0
-
-    def outLineReceived(self, line):
-        if line.startswith('finished target '):
-            self.numTargets += 1
-            self.step.setProgress('targets', self.numTargets)
-            if line.strip().endswith('.targetinstall'):
-                self.numPackages += 1
-                self.step.setProgress('packages', self.numPackages)
-
-
-class PTXDistBuild(steps.ShellCommand):
-
+class PTXDistBuild(steps.ShellSequence):
     def __init__(self, **kwargs):
         kwargs.setdefault('haltOnFailure', True)
         kwargs.setdefault('flunkOnFailure', True)
 
-        steps.ShellCommand.__init__(self, **kwargs)   # always upcall!
-        counter = PTXDistBuildCounter()
-        self.addLogObserver('stdio', counter)
-        self.progressMetrics += ('targets', 'packages')
-
-git_lock = util.MasterLock("git")
-
-from datetime import datetime
+        steps.ShellSequence.__init__(self, **kwargs)
+
+        self.name = "PTXDist Build"
+        self.description = "building"
+        self.descriptionDone = "built"
+        self.commands = [
+            # set ptxdist build platform
+            util.ShellArg(
+                haltOnFailure=True,
+                command=[
+                    "ptxdist",
+                    "platform",
+                    util.Property("platform")
+                ]),
+
+            # set ptxdist target
+            util.ShellArg(
+                haltOnFailure=True,
+                command=[
+                    "ptxdist",
+                    "select",
+                    util.Property('project')
+                ]),
+
+            # run ptxdist build with build.py
+            util.ShellArg(
+                logfile="ptxdist build",
+                haltOnFailure=True,
+                command=util.FlattenList([
+                    "python",
+                    "scripts/build.py",
+                    "--noclean",
+                    "--noconfirm",
+                    util.Property("version"),
+                    util.Interpolate("%(prop:release:#?|release|beta)s"),
+                    util.Transform(
+                        string.split,
+                        util.Property(
+                            "packages",
+                            default='')
+                    )
+                ])),
+
+            util.ShellArg(
+                logfile="archive",
+                haltOnFailure=True,
+                command=[
+                    "tar", "-v", "-c", "-z",
+                    "-C", util.Property("ipkg_root"),
+                    "-f", util.Interpolate("%(prop:artifact_dest)s/%(prop:ipkg_artifact)s"),
+                    util.Property("project")
+                ]),
+        ]
+
+
+class PTXDistImages(steps.ShellSequence):
 
+    def __init__(self, **kwargs):
+        kwargs.setdefault('haltOnFailure', True)
+        kwargs.setdefault('flunkOnFailure', True)
 
-@util.renderer
-def CurrentTime(props):
+        steps.ShellSequence.__init__(self, **kwargs)
+
+        self.name = "PTXDist Images"
+        self.description = "making images"
+        self.descriptionDone = "images"
+        self.commands = [
+            util.ShellArg(
+                haltOnFailure=True,
+                command=[
+                    "ptxdist",
+                    "collection",
+                    util.Property("collection")
+                ]),
+
+            util.ShellArg(
+                logfile="ptxdist images",
+                haltOnFailure=True,
+                command=["ptxdist", "images"],
+            ),
+
+            util.ShellArg(
+                logfile="archive",
+                haltOnFailure=True,
+                command=[
+                    "tar", "-v", "-c", "-z",
+                    "-C", util.Property("image_root"),
+                    "-f", util.Interpolate("%(prop:artifact_dest)s/%(prop:image_artifact)s"),
+                    "."
+                ]
+            ),
+        ]
+
+
+def CurrentTime():
+    from datetime import datetime
     import string
     dt = datetime.now()
     dt.replace(microsecond=0)
@@ -148,43 +245,83 @@ def CurrentTime(props):
     return dts
 
 
-class PTXDistFactory(util.BuildFactory):
-
-    def __init__(self, repourl, branch, platform):
-        util.BuildFactory.__init__(self)
-        self.addStep(steps.SetProperty('platform', platform))
-        self.addStep(steps.SetProperty(
-            'select', util.Interpolate("OrionLX-%(prop:platform)s-glibc")))
-        self.addStep(steps.SetProperty('timestamp', CurrentTime))
-        self.addStep(steps.SetProperty('dest', util.Interpolate(
-            "/cache/images/%(prop:buildername)s/%(prop:timestamp)s")))
-        self.addStep(steps.Git(repourl=repourl, branch=branch, mode="full",
-                               method="clobber", locks=[git_lock.access('exclusive')], retry=(360, 5)))
-        self.addStep(steps.ShellCommand(
-            command=["mkdir", "-p", util.Property('dest')]))
-        self.addStep(PTXDistBuild(
-            command=["ptxdist", "platform", util.Property("platform")]))
-        self.addStep(PTXDistBuild(
-            command=["ptxdist", "select", util.Property("select")]))
-        self.addStep(PTXDistBuild(command=["ptxdist", "go"]))
-        self.addStep(PTXDistBuild(command=["ptxdist", "make", "ipkg-push"]))
-        self.addStep(PTXDistBuild(command=["./scripts/ipkg-header"]))
-
-# current_armeb_xscale #
-current_armeb_xscale_factory = PTXDistFactory(
-    worker_ptxdist_repourl, worker_ptxdist_branch, 'armeb-xscale')
-# check out the source
-current_armeb_xscale_factory.addStep(PTXDistBuild(
-    command=["ptxdist", "collection", "armeb-base"]))
-current_armeb_xscale_factory.addStep(
-    PTXDistBuild(command=["ptxdist", "images"]))
-current_armeb_xscale_factory.addStep(steps.ShellCommand(
-    command=["cp", "platform-armeb-xscale/images/root.jffs2_64", util.Property('dest')]))
-current_armeb_xscale_factory.addStep(steps.ShellCommand(
-    command=["cp", "platform-armeb-xscale/images/root.jffs2_128", util.Property('dest')]))
-# current_armeb_xscale_factory.addStep(steps.ShellCommand(command=["./scripts/build-upgrade-test.sh"]))
-# current_armeb_xscale_factory.addStep(steps.ShellCommand(command=["curl", "--progress-bar", "-o", "/dev/null", "http://george:1234@172.16.190.70/outlet?1=CCL"]))
-# current_armeb_xscale_factory.addStep(steps.ShellCommand(command=[
+@util.renderer
+def ComputeBuildProperties(props):
+    newprops = {}
+
+    newprops['timestamp'] = CurrentTime()
+
+    version = props.getProperty('version', default=timestamp)
+
+    newprops['project'] = "OrionLX-%s-glibc" % (
+        props.getProperty("platform")
+    )
+
+    newprops['artifact_dest'] = "/cache/artifacts/%s" % (
+        version,
+    )
+
+    newprops['image_root'] = "%s/build/platform-%s/images" % (
+        props.getProperty("builddir"),
+        props.getProperty("platform"),
+    )
+
+    newprops['image_artifact'] = "%s-%s.images.tar.gz" % (
+        newprops['project'],
+        version,
+    )
+
+    newprops['ipkg_root'] = "/cache/ipkg-repository"
+
+    newprops['ipkg_repo'] = "%s/%s" % (
+        newprops['ipkg_root'],
+        newprops['project'],
+    )
+
+    newprops['ipkg_artifact'] = "%s-%s.ipkg.tar.gz" % (
+        newprops['project'],
+        version,
+    )
+
+    newprops['collection'] = collections.get(
+        props.getProperty('platform')
+    )
+
+    return newprops
+
+
+def isReleaseBuild(step):
+    if step.getProperty("release") is True:
+        return True
+    return False
+
+# Create build factory for ptxdist
+ptxdist_factory = util.BuildFactory(
+    steps.SetProperties(ComputeBuildProperties),
+
+    steps.MakeDirectory(dir=util.Property('artifact_dest')),
+
+    steps.MakeDirectory(dir=util.Property('ipkg_repo')),
+
+    # check out the source
+    steps.Git(
+        codebase=util.Property('codebase'),
+        repourl=util.Property('repository'),
+        branch=util.Property('branch'),
+        mode=util.Interpolate("%(prop:clobber:#?|full|incremental)s"),
+        method="clobber",
+    ),
+
+    PTXDistBuild(),
+
+    PTXDistImages(
+        doStepIf=isReleaseBuild,
+    ),
+)
+
+# ptxdist_factory.addStep(steps.ShellCommand(command=["./scripts/build-upgrade-test.sh"]))
+# ptxdist_factory.addStep(steps.ShellCommand(command=["curl", "--progress-bar", "-o", "/dev/null", "http://george:1234@172.16.190.70/outlet?1=CCL"]))
+# ptxdist_factory.addStep(steps.ShellCommand(command=[
 # 	"./scripts/upgradetest.py",
 # 	"load_7_upgrade_to_8",
 # 	"/srv/tftp/root.jffs2_64",
@@ -196,8 +333,8 @@ current_armeb_xscale_factory.addStep(steps.ShellCommand(
 # 	"orionpythontests",
 # 	"orionprotocoltests",
 # 	"--orion-config", "./local-pkg/buildslave_config_armeb-xscale.tar.gz"]))
-# current_armeb_xscale_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_armeb_xscale']))
-# current_armeb_xscale_factory.addStep(trigger.Trigger(schedulerNames=['remote_tests_armeb_xscale']))
+# ptxdist_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_armeb_xscale']))
+# ptxdist_factory.addStep(trigger.Trigger(schedulerNames=['remote_tests_armeb_xscale']))
 
 # local_tests_armeb_xscale #
 local_tests_armeb_xscale_factory = util.BuildFactory()
@@ -212,33 +349,21 @@ local_tests_armeb_xscale_factory.addStep(steps.ShellCommand(
 remote_tests_armeb_xscale_factory = util.BuildFactory()
 # check out the source
 remote_tests_armeb_xscale_factory.addStep(steps.Git(repourl=acceptance_test_repourl, alwaysUseLatest=True,
-                                                    mode="incremental", method="clobber", locks=[git_lock.access('exclusive')], retry=(120, 5)))
+                                                    mode="incremental", method="clobber", retry=(120, 5)))
 remote_tests_armeb_xscale_factory.addStep(steps.ShellCommand(
     command=["py.test", "-s", "--orion=172.16.64.150", "--hub-address=172.16.64.25:4444", "--browser=chrome"], workdir='build/WebUI'))
 
 # current_i686 #
-current_i686_factory = PTXDistFactory(
-    worker_ptxdist_repourl, worker_ptxdist_branch, 'i686')
-# check out the source
-current_i686_factory.addStep(PTXDistBuild(
-    command=["ptxdist", "collection", "i686-base"]))
-current_i686_factory.addStep(PTXDistBuild(command=["ptxdist", "images"]))
-current_i686_factory.addStep(steps.ShellCommand(
-    command=["gzip", "-f", "platform-i686/images/hd.img"]))
-current_i686_factory.addStep(steps.ShellCommand(
-    command=["cp", "platform-i686/images/hd.img.gz", util.Property('dest')]))
+# current_i686_factory.addStep(steps.ShellCommand(
+#     command=["gzip", "-f", "platform-i686/images/hd.img"]))
+# current_i686_factory.addStep(steps.ShellCommand(
+#     command=["cp", "platform-i686/images/hd.img.gz", util.Property('dest')]))
 # current_i686_factory.addStep(trigger.Trigger(schedulerNames=['upgrade_i686']))
 # current_i686_factory.addStep(steps.ShellCommand(command=["sleep", "120"]))
 # current_i686_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_i686']))
 # current_i686_factory.addStep(trigger.Trigger(schedulerNames=['remote_tests_i686']))
 
 # current_am335x #
-current_am335x_factory = PTXDistFactory(
-    worker_ptxdist_repourl, worker_ptxdist_branch, 'am335x')
-# check out the source
-current_am335x_factory.addStep(PTXDistBuild(
-    command=["ptxdist", "collection", "am335x-base"]))
-current_am335x_factory.addStep(PTXDistBuild(command=["ptxdist", "images"]))
 # current_am335x_factory.addStep(trigger.Trigger(schedulerNames=['upgrade_am335x']))
 # current_am335x_factory.addStep(steps.ShellCommand(command=["sleep", "120"]))
 # current_am335x_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_am335x']))
@@ -263,7 +388,7 @@ local_tests_i686_factory.addStep(steps.ShellCommand(
 # remote_tests_i686 #
 remote_tests_i686_factory = util.BuildFactory()
 remote_tests_i686_factory.addStep(steps.Git(repourl=acceptance_test_repourl, alwaysUseLatest=True,
-                                            mode="incremental", method="clobber", locks=[git_lock.access('exclusive')], retry=(120, 5)))
+                                            mode="incremental", method="clobber", retry=(120, 5)))
 remote_tests_i686_factory.addStep(steps.ShellCommand(command=[
                                   "py.test", "-s", "--orion=172.16.65.100", "--hub-address=172.16.64.25:4444", "--browser=chrome"], workdir='build/WebUI'))
 
@@ -286,54 +411,64 @@ local_tests_am335x_factory.addStep(steps.ShellCommand(
 # remote_tests_am335x #
 remote_tests_am335x_factory = util.BuildFactory()
 remote_tests_am335x_factory.addStep(steps.Git(repourl=acceptance_test_repourl, alwaysUseLatest=True,
-                                              mode="incremental", method="clobber", locks=[git_lock.access('exclusive')], retry=(120, 5)))
+                                              mode="incremental", method="clobber", retry=(120, 5)))
 remote_tests_am335x_factory.addStep(steps.ShellCommand(command=[
                                     "py.test", "-s", "--orion=172.16.190.72", "--hub-address=172.16.64.25:4444", "--browser=chrome"], workdir='build/WebUI'))
 
-from buildbot.config import BuilderConfig
-
 builders = []
 builders.append(
-    BuilderConfig(name="current_armeb_xscale",
+    BuilderConfig(name="force-armeb-xscale",
+                  workernames=["worker-ptxdist"],
+                  factory=ptxdist_factory,
+                  properties={
+                      'platform': 'armeb-xscale',
+                  }))
+builders.append(
+    BuilderConfig(name="force-i686",
                   workernames=["worker-ptxdist"],
-                  factory=current_armeb_xscale_factory))
+                  factory=ptxdist_factory,
+                  properties={
+                      'platform': 'i686',
+                  }))
+builders.append(
+    BuilderConfig(name="force-am335x",
+                  workernames=["worker-ptxdist"],
+                  factory=ptxdist_factory,
+                  properties={
+                      'platform': 'am335x',
+                  }))
+
 builders.append(
     BuilderConfig(name="local_tests_armeb_xscale",
                   workernames=["orion-armeb-xscale-slave"],
                   factory=local_tests_armeb_xscale_factory))
+builders.append(
+    BuilderConfig(name="local_tests_i686",
+                  workernames=["orion-i686-slave"],
+                  factory=local_tests_i686_factory))
+builders.append(
+    BuilderConfig(name="local_tests_am335x",
+                  workernames=["orion-am335x-slave"],
+                  factory=local_tests_am335x_factory))
+
 builders.append(
     BuilderConfig(name="remote_tests_armeb_xscale",
                   workernames=["worker-ptxdist"],
                   factory=remote_tests_armeb_xscale_factory))
 builders.append(
-    BuilderConfig(name="current_i686",
+    BuilderConfig(name="remote_tests_i686",
                   workernames=["worker-ptxdist"],
-                  factory=current_i686_factory))
+                  factory=remote_tests_i686_factory))
 builders.append(
-    BuilderConfig(name="current_am335x",
+    BuilderConfig(name="remote_tests_am335x",
                   workernames=["worker-ptxdist"],
-                  factory=current_am335x_factory))
+                  factory=remote_tests_am335x_factory))
+
 builders.append(
     BuilderConfig(name="upgrade_i686",
                   workernames=["orion-i686-slave"],
                   factory=upgrade_i686_factory))
-builders.append(
-    BuilderConfig(name="local_tests_i686",
-                  workernames=["orion-i686-slave"],
-                  factory=local_tests_i686_factory))
-builders.append(
-    BuilderConfig(name="remote_tests_i686",
-                  workernames=["worker-ptxdist"],
-                  factory=remote_tests_i686_factory))
 builders.append(
     BuilderConfig(name="upgrade_am335x",
                   workernames=["orion-am335x-slave"],
                   factory=upgrade_am335x_factory))
-builders.append(
-    BuilderConfig(name="local_tests_am335x",
-                  workernames=["orion-am335x-slave"],
-                  factory=local_tests_am335x_factory))
-builders.append(
-    BuilderConfig(name="remote_tests_am335x",
-                  workernames=["worker-ptxdist"],
-                  factory=remote_tests_am335x_factory))
diff --git a/roles/buildbot-worker-ptxdist/defaults/main.yml b/roles/buildbot-worker-ptxdist/defaults/main.yml
index 11c44750..ebe2d7ed 100644
--- a/roles/buildbot-worker-ptxdist/defaults/main.yml
+++ b/roles/buildbot-worker-ptxdist/defaults/main.yml
@@ -50,6 +50,9 @@ container_volumes:
 - '{{ data_volume }}:{{ data_path }}:z'
 - '{{ cache_volume }}:{{ cache_path }}:z'
 - '{{ secrets_hostdir }}:{{ secrets_path }}'
+- '{{ config_hostdir }}/pydistutils.cfg:/home/buildbot/.pydistutils.cfg'
+- '{{ config_hostdir }}/ptxdistrc:/home/buildbot/.ptxdist/ptxdistrc-2012.09'
+- '{{ config_hostdir }}/netrc:/home/buildbot/.netrc'
 
 # mount path of the data volume
 data_path: '/buildbot'
@@ -64,8 +67,6 @@ hsm_host: '{{ansible_facts.default_ipv4.address}}'
 image_args:
   BUILDBOT_UID: '{{buildbot_uid}}'
   BUILDBOT_VERSION: 'v{{buildbot_version}}'
-  PTK_URI: '{{asset_host}}/610-009981-015_SW_PTK_5.3_Client_RevA.tar'
-  PTK_HSM_HOST: '{{hsm_host}}'
 
 # directory of the image source
 image_dir: '{{ docker_projects_dir }}/{{ container_hostname }}'
diff --git a/roles/buildbot-worker-ptxdist/tasks/main.yml b/roles/buildbot-worker-ptxdist/tasks/main.yml
index b85341a0..b78c2af0 100644
--- a/roles/buildbot-worker-ptxdist/tasks/main.yml
+++ b/roles/buildbot-worker-ptxdist/tasks/main.yml
@@ -25,7 +25,7 @@
     - '{{ cache_volume }}:{{ cache_path }}:z'
     detach: no
     cleanup: yes
-    command: /bin/ash -c 
+    command: /bin/ash -c
       "mkdir -p {{item}} &&
       chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}} &&
       chmod -v 777 {{item}}"
@@ -44,17 +44,49 @@
     - '{{ data_volume }}:{{ data_path }}:z'
     detach: no
     cleanup: yes
-    command: /bin/ash -c 
+    command: /bin/ash -c
       "mkdir -p {{item}} &&
       if [ $(stat -c '%u' '{{item}}') -ne {{buildbot_uid}} ]; then
         chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}};
       fi"
 
+- name: Create configuration directory
+  file:
+    path: '{{ config_hostdir }}'
+    state: directory
+
+- name: Generate distutils configuration
+  template:
+    src: pydistutils.cfg.j2
+    dest: '{{ config_hostdir }}/pydistutils.cfg'
+    group: '{{ buildbot_uid }}'
+    owner: '{{ buildbot_uid }}'
+
+- name: Generate PTXdist configuration
+  template:
+    src: ptxdistrc.j2
+    dest: '{{ config_hostdir }}/ptxdistrc'
+    group: '{{ buildbot_uid }}'
+    owner: '{{ buildbot_uid }}'
+
+- name: Populate assets secret
+  template:
+    src: "netrc.j2"
+    dest: '{{ config_hostdir }}/netrc'
+    group: '{{ buildbot_uid }}'
+    owner: '{{ buildbot_uid }}'
+    mode: "u=rw,g=,o="
+
 - name: Checkout image repo
   git:
     repo: '{{ image_repo }}'
     version: master
     dest: '{{ image_dir }}'
+    force: yes
+
+- template:
+    src: pydistutils.cfg.j2
+    dest: '{{ image_dir }}/buildbot/.pydistutils.cfg'
 
 - name: Create buildbot worker image
   docker_image:
