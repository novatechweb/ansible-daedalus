Bottom: 1927096f79c1e32a9c50c516920d0d047ed977b1
Top:    56545ec0793220d990a1212af728ab56f1862eb2
Author: Andrew Cooper <andrew.cooper@novatechweb.com>
Date:   2018-08-30 09:43:47 -0500

Add buildbot PTXdist worker Docker image

---
diff --git a/ansible-playbook/buildbot.yml b/ansible-playbook/buildbot.yml
index aa76fbaf..6c94f54e 100644
--- a/ansible-playbook/buildbot.yml
+++ b/ansible-playbook/buildbot.yml
@@ -22,9 +22,13 @@
     - buildbot
     - buildbot-worker
     - buildbot-worker-ntel
+    - buildbot-worker-ptxdist
   vars:
     buildbot_master: "{{ hostvars[buildbot_hostname].ip_addr }}"
   tasks:
     - name: Build and start the Buildbot worker container
       import_role:
         name: buildbot-worker-ntel
+    - name: Build and start the Buildbot worker container
+      import_role:
+        name: buildbot-worker-ptxdist
diff --git a/ansible-playbook/group_vars/all/buildbot.yml b/ansible-playbook/group_vars/all/buildbot.yml
index e9601b3c..a93f6ccb 100644
--- a/ansible-playbook/group_vars/all/buildbot.yml
+++ b/ansible-playbook/group_vars/all/buildbot.yml
@@ -2,3 +2,4 @@
 buildbot_version: 1.2.0
 buildbot_worker_port: 9989
 buildbot_worker_ntel: worker-ntel
+buildbot_worker_ptxdist: worker-ptxdist
diff --git a/ansible-playbook/group_vars/all/credentials.yml b/ansible-playbook/group_vars/all/credentials.yml
index afeff4e3..f3aec6f1 100644
--- a/ansible-playbook/group_vars/all/credentials.yml
+++ b/ansible-playbook/group_vars/all/credentials.yml
@@ -2,6 +2,7 @@
 # passwords
 buildbot_admin_password:             '{{ lookup("password", playbook_dir + "/credentials/buildbot/admin"                      , length=20) }}'
 buildbot_worker_ntel_password:       '{{ lookup("password", playbook_dir + "/credentials/buildbot/worker_ntel"                , length=20) }}'
+buildbot_worker_ptxdist_password:    '{{ lookup("password", playbook_dir + "/credentials/buildbot/worker_ptxdist"             , length=20) }}'
 buildsystem_database_build_password: '{{ lookup("password", playbook_dir + "/credentials/buildsystem/database/readuser") }}'
 buildsystem_database_root_password:  '{{ lookup("password", playbook_dir + "/credentials/buildsystem/database/root"           , length=20) }}'
 buildsystem_ssh_prod_user_password:  '{{ lookup("password", playbook_dir + "/credentials/buildsystem/ssh/prod"                , length=20) }}'
diff --git a/docker/buildbot-worker-ptxdist/Dockerfile b/docker/buildbot-worker-ptxdist/Dockerfile
new file mode 100644
index 00000000..ee6bfeb5
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/Dockerfile
@@ -0,0 +1,93 @@
+FROM        krallin/ubuntu-tini:trusty
+
+ENV PTXDIST_VERSION 2012.09.1
+
+WORKDIR /buildbot
+
+RUN apt-get update \
+&&  DEBIAN_FRONTEND=noninteractive \
+    apt-get -y install -q wget \
+&&  wget -qO /etc/apt/trusted.gpg.d/ptx-archive-key.gpg https://debian.pengutronix.de/debian/ptx-archive-key.gpg \
+&&  wget -qO /etc/apt/sources.list.d/pengutronix.list   https://debian.pengutronix.de/debian/pengutronix.list \
+&&  apt-get update \
+&&  DEBIAN_FRONTEND=noninteractive \
+    apt-get -y install -q \
+        oselas.toolchain-2011.11.3-armeb-xscale-linux-gnueabi-gcc-4.6.2-glibc-2.14.1-binutils-2.21.1a-kernel-2.6.39-sanitized \
+        oselas.toolchain-2012.12.1-arm-cortexa8-linux-gnueabi-gcc-4.7.3-glibc-2.16.0-binutils-2.22-kernel-3.6-sanitized \
+        oselas.toolchain-2012.12.1-i686-atom-linux-gnu-gcc-4.7.2-glibc-2.16.0-binutils-2.22-kernel-3.6-sanitized \
+&&  rm -rf /var/lib/apt/lists/*
+
+# Install security updates and required packages
+RUN apt-get update \
+&&  DEBIAN_FRONTEND=noninteractive \
+    apt-get -y install -q \
+        autoconf \
+        bison \
+        build-essential \
+        ccache \
+        comerr-dev \
+        default-jre-headless \
+        docbook-xml \
+        docbook-xsl \
+        groff-base \
+        libgdk-pixbuf2.0-dev \
+        libgtk2.0-bin \
+        libicu-dev \
+        libncurses5 \
+        libncurses5-dev \
+        libswitch-perl \
+        libxml-simple-perl \
+        libxml2-utils \
+        lzop \
+        flex \
+        gawk \
+        gcc \
+        gconf2 \
+        gettext \
+        git \
+        libtool \
+        make \
+        python-dev \
+        python-libxml2 \
+        python-tdb \
+        ruby \
+        subversion \
+        ss-dev \
+        texinfo \
+        unzip \
+        wget \
+        xsltproc \
+        yasm \
+&&  rm -rf /var/lib/apt/lists/*
+
+ARG BUILDBOT_VERSION
+# Install required python packages, and twisted
+RUN wget https://bootstrap.pypa.io/get-pip.py \
+&&  python get-pip.py --no-cache-dir \
+&&  pip --no-cache-dir install \
+        'virtualenv' \
+        'twisted[tls]' \
+        buildbot-worker${BUILDBOT_VERSION:+==${BUILDBOT_VERSION}} \
+&&  rm -rf get-pip.py
+
+ARG BUILDBOT_UID=1000
+COPY buildbot/ /home/buildbot/
+RUN useradd --comment "Buildbot Server" --home-dir "/home/buildbot" --shell "/bin/bash" --uid ${BUILDBOT_UID} --user-group buildbot \
+&&  chown -v -R buildbot:buildbot "/buildbot" \
+&&  chown -v -R buildbot:buildbot "/home/buildbot" \
+&&  useradd --comment "Gnome Display Manager" --home-dir "/var/lib/gdm" --shell "/sbin/nologin" --user-group --system gdm
+
+# Install ptxdist, a build system
+COPY src /usr/src/ptxdist-${PTXDIST_VERSION}
+RUN cd /usr/src/ptxdist-${PTXDIST_VERSION} \
+&&  touch ptxdist \
+&&  echo "${PTXDIST_VERSION}" > .tarball-version \
+&&  ./autogen.sh \
+&&  ./configure \
+&&  make \
+&&  make install \
+&&  make distclean
+
+USER buildbot
+
+CMD ["/home/buildbot/start.sh"]
diff --git a/docker/buildbot-worker-ptxdist/buildbot/.ccache/ccache.conf b/docker/buildbot-worker-ptxdist/buildbot/.ccache/ccache.conf
new file mode 100644
index 00000000..150374b8
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/buildbot/.ccache/ccache.conf
@@ -0,0 +1,8 @@
+# Set maximum cache size to 10 GB:
+max_size = 10G
+
+# Disable hard linking for shared cache
+hard_link = false
+
+# Place cache directory in common location
+cache_dir = /cache/ccache
diff --git a/docker/buildbot-worker-ptxdist/buildbot/.gitconfig b/docker/buildbot-worker-ptxdist/buildbot/.gitconfig
new file mode 100644
index 00000000..efd988f4
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/buildbot/.gitconfig
@@ -0,0 +1,3 @@
+[user]
+	name = BuildBot
+	email = buildbot@novatechweb.com
diff --git a/docker/buildbot-worker-ptxdist/buildbot/.ptxdist/ptxdistrc-git b/docker/buildbot-worker-ptxdist/buildbot/.ptxdist/ptxdistrc-git
new file mode 100644
index 00000000..7dbac6ef
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/buildbot/.ptxdist/ptxdistrc-git
@@ -0,0 +1,75 @@
+#
+# Automatically generated file; DO NOT EDIT.
+# PTXdist 2012.09.1-00373-gee9622f
+#
+
+#
+# PTXDIST Setup Menu
+#
+
+#
+# User
+#
+PTXCONF_SETUP_USER_NAME="NovaTech Buildbot"
+PTXCONF_SETUP_USER_EMAIL="buildbot@novatechweb.com"
+
+#
+# Proxies
+#
+PTXCONF_SETUP_FTP_PROXY=""
+PTXCONF_SETUP_HTTP_PROXY=""
+PTXCONF_SETUP_HTTPS_PROXY=""
+PTXCONF_SETUP_NO_PROXY=""
+
+#
+# Project Searchpath
+#
+PTXCONF_SETUP_PROJECTPATH="${PTXDIST_TOPDIR}/projects"
+
+#
+# Source Directories
+#
+PTXCONF_SETUP_SRCDIR="/cache/downloads"
+
+#
+# Source Download
+#
+# PTXCONF_SETUP_NO_DOWNLOAD is not set
+# PTXCONF_SETUP_PTXMIRROR_ONLY is not set
+PTXCONF_SETUP_PTXMIRROR="http://www.pengutronix.de/software/ptxdist/temporary-src"
+PTXCONF_SETUP_DEBMIRROR="http://ftp.uni-kl.de/debian"
+PTXCONF_SETUP_SFMIRROR="http://downloads.sourceforge.net/sourceforge"
+PTXCONF_SETUP_GNUMIRROR="http://ftp.uni-kl.de/pub/gnu"
+PTXCONF_SETUP_XORGMIRROR="http://xorg.mirrors.pair.com/pub/X11/ftp.x.org"
+PTXCONF_SETUP_KERNELMIRROR="http://www.kernel.org/pub/linux"
+# PTXCONF_SETUP_CHECK_ALWAYS is not set
+PTXCONF_SETUP_CHECK_NOTEMPTY=y
+# PTXCONF_SETUP_CHECK_NEVER is not set
+PTXCONF_SETUP_CHECK="notempty"
+
+#
+# IPKG Repository
+#
+PTXCONF_SETUP_IPKG_REPOSITORY="/cache/ipkg-repository"
+
+#
+# Java SDK
+#
+PTXCONF_SETUP_JAVA_SDK="/usr"
+
+#
+# Developer Options
+#
+# PTXCONF_SETUP_DISABLE_LOCAL_CHECK is not set
+PTXCONF_SETUP_ENV_WHITELIST=""
+# PTXCONF_SETUP_COMMON_CACHE is not set
+# PTXCONF_SETUP_GEN_DEP_TREE is not set
+# PTXCONF_SETUP_CHECK_EXIT_ON_ERROR is not set
+PTXCONF_SETUP_CCACHE=y
+PTXCONF_SETUP_PATCHIN_GIT=y
+# PTXCONF_SETUP_NFS_REL_SYMLINK is not set
+# PTXCONF_SETUP_DIRECT_CLEAN is not set
+PTXCONF_SETUP_HOST_CPP="cpp"
+PTXCONF_SETUP_HOST_CC="gcc"
+PTXCONF_SETUP_HOST_CXX="g++"
+PTXCONF_SETUP_HOST_MAKE="make"
diff --git a/docker/buildbot-worker-ptxdist/buildbot/.pydistutils.cfg b/docker/buildbot-worker-ptxdist/buildbot/.pydistutils.cfg
new file mode 100644
index 00000000..8dc2a29b
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/buildbot/.pydistutils.cfg
@@ -0,0 +1,2 @@
+[easy_install]
+index-url=http://172.16.103.72/repository/PyPi_Proxy/simple
diff --git a/docker/buildbot-worker-ptxdist/buildbot/buildbot.tac b/docker/buildbot-worker-ptxdist/buildbot/buildbot.tac
new file mode 100644
index 00000000..37012ab4
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/buildbot/buildbot.tac
@@ -0,0 +1,38 @@
+import fnmatch
+import os
+import sys
+
+from twisted.application import service
+from twisted.python.log import FileLogObserver
+from twisted.python.log import ILogObserver
+
+from buildbot_worker.bot import Worker
+
+# setup worker
+basedir = os.path.abspath(os.path.dirname(__file__))
+application = service.Application('buildbot-worker')
+
+
+application.setComponent(ILogObserver, FileLogObserver(sys.stdout).emit)
+# and worker on the same process!
+buildmaster_host = os.environ.get("BUILDBOT_MASTER", 'localhost')
+port = int(os.environ.get("BUILDBOT_WORKER_PORT", 9989))
+workername = os.environ.get("BUILDBOT_WORKER_NAME", 'docker')
+passwd = os.environ.get("BUILDBOT_WORKER_PASS")
+
+# delete the password from the environ so that it is not leaked in the log
+blacklist = os.environ.get("BUILDBOT_ENVIRONMENT_BLACKLIST", "BUILDBOT_WORKER_PASSWORD").split(',')
+for name in list(os.environ.keys()):
+    for toremove in blacklist:
+        if fnmatch.fnmatch(name, toremove):
+            del os.environ[name]
+
+keepalive = 600
+umask = None
+maxdelay = 300
+allow_shutdown = None
+
+s = Worker(buildmaster_host, port, workername, passwd, basedir,
+           keepalive, umask=umask, maxdelay=maxdelay,
+           allow_shutdown=allow_shutdown)
+s.setServiceParent(application)
diff --git a/docker/buildbot-worker-ptxdist/buildbot/start.sh b/docker/buildbot-worker-ptxdist/buildbot/start.sh
new file mode 100755
index 00000000..f025e661
--- /dev/null
+++ b/docker/buildbot-worker-ptxdist/buildbot/start.sh
@@ -0,0 +1,18 @@
+#!/bin/sh
+
+SSH_BITS=${SSH_BITS-"2048"}
+SSH_TYPE=${SSH_TYPE-"rsa"}
+SSH_FILE=${SSH_FILE-"$HOME/.ssh/id_rsa"}
+
+BUILDBOT_DATA=${BUILDBOT_DATA-"/buildbot"}
+
+ssh-keygen -q -b ${SSH_BITS} -t ${SSH_TYPE} -N '' -f ${SSH_FILE} 0>&- 1>/dev/null 2>/dev/null
+
+if [ -n "$BUILDBOT_KNOWN_HOSTS_FILE" ] && [ -f "$BUILDBOT_KNOWN_HOSTS_FILE" ]
+then
+    mkdir -p "${HOME}/.ssh"
+    cp -v "$BUILDBOT_KNOWN_HOSTS_FILE" "${HOME}/.ssh/known_hosts"
+fi
+
+ln -v -s -f ${HOME}/buildbot.tac $BUILDBOT_DATA
+exec twistd --nodaemon --logfile=- --pidfile=/tmp/twistd.pid --python=buildbot.tac
diff --git a/roles/buildbot-master/files/ptxdist.py b/roles/buildbot-master/files/ptxdist.py
index d6d84f2e..c6e148cf 100644
--- a/roles/buildbot-master/files/ptxdist.py
+++ b/roles/buildbot-master/files/ptxdist.py
@@ -1,26 +1,39 @@
 import os
+import string
 from buildbot.plugins import *
+from datetime import datetime
+from buildbot.config import BuilderConfig
+
+c = WorkerConfig = {}
+
+DEFAULT_BRANCH = 'master'
+DEFAULT_REPO = 'git@git.novatech-llc.com:Orion-ptxdist/workspace-ptxdist2'
+ASSET_HOST = os.getenv("ASSET_HOST", default="http://127.0.0.1")
+
+collections = {
+    "armeb-xscale": "armeb-base",
+    "i686": "i686-base",
+    "am335x": "am335x-base",
+}
 
 # Workers
 # The 'workers' list defines the set of recognized buildworkers. Each element is
 # a Worker object, specifying a unique worker name and password.  The same
 # worker name and password must be configured on the worker.
 workers = [
-    worker.Worker("worker-ptxdist", "pass", max_builds=1),
-    worker.Worker("orion-i686-slave", "pass"),
-    worker.Worker("orion-armeb-xscale-slave", "pass"),
-    worker.Worker("orion-am335x-slave", "pass"),
+    worker.Worker("worker-ptxdist", "pass", max_builds=3),
+    worker.Worker("orion-i686-slave", "pass", max_builds=1),
+    worker.Worker("orion-armeb-xscale-slave", "pass", max_builds=1),
+    worker.Worker("orion-am335x-slave", "pass", max_builds=1),
 ]
 
-worker_ptxdist_repourl = 'git@git.novatech-llc.com:andrew.cooper/workspace-ptxdist2.git'
-worker_ptxdist_branch = 'docker-build'
 acceptance_test_repourl = 'git@git.novatech-llc.com:NovaTech-Testing/AcceptanceTests.git'
 
 # CHANGESOURCES
 change_source = [
     changes.GitPoller(
-        repourl=worker_ptxdist_repourl,
-        branches=['master'],
+        repourl=DEFAULT_REPO,
+        branches=[DEFAULT_BRANCH],
         project='ptxdist',
         workdir='gitpoller-ptxdist')
 ]
@@ -34,42 +47,56 @@ schedulers = [
     #                            treeStableTimer=9*60,
     # builderNames=["current_armeb_xscale","current_i686", "current_am335x"]))
 
-    # SingleBranchScheduler(
-    #                            name="linux-3.2",
-    #                            change_filter=filter.ChangeFilter(branch='branches/linux-3.2'),
-    #                            treeStableTimer=9*60,
-    #                            builderNames=["linux-3.2_armeb_xscale","linux-3.2_i686"]))
-    # SingleBranchScheduler(
-    #                            name="linux-3.8",
-    #                            change_filter=filter.ChangeFilter(branch='branches/linux-3.8'),
-    #                            treeStableTimer=9*60,
-    #                            builderNames=["linux-3.8_am335x"]))
     schedulers.ForceScheduler(
-        name="force-ptxdist",
+        name="ptxdist-force",
+        label="Force PTXdist Build",
         builderNames=[
-            "current_armeb_xscale",
-            "current_i686",
-            "current_am335x",
+            "force-armeb-xscale",
+            "force-i686",
+            "force-am335x",
+        ],
+        codebases=[
+            util.CodebaseParameter(
+                codebase="orion-ptxdist-workspace",
+                label="Build Source",
+                # will generate a combo box
+                repository=util.StringParameter(
+                    name="repository",
+                    default=DEFAULT_REPO),
+                branch=util.StringParameter(
+                    name="branch",
+                    default=DEFAULT_BRANCH),
+                revision=util.StringParameter(
+                    name="revision",
+                    default="")
+            )
         ],
         properties=[
+            util.StringParameter(
+                name="version",
+                label="distribution version",
+                default='',
+                required=True
+            ),
+            util.BooleanParameter(
+                name='release',
+                label="Make a release build",
+                default=False
+            ),
+            util.StringParameter(
+                name="packages",
+                label="space-delimited list of packages to build",
+                default='',
+                required=False,
+            ),
             util.BooleanParameter(
                 name="clobber",
                 label="Clobber build directory",
-                default=False),
+                default=False
+            ),
         ],
     ),
 
-    schedulers.Nightly(
-        name="ptxdist-nightly",
-        branch=None,
-        builderNames=[
-            "current_armeb_xscale",
-            "current_i686",
-            "current_am335x",
-        ],
-        hour=22
-    ),
-
     schedulers.Triggerable(
         name="upgrade_i686",
         builderNames=["upgrade_i686"]),
@@ -110,37 +137,107 @@ schedulers = [
 # only take place on one worker.
 
 
-class PTXDistBuildCounter(util.LogLineObserver):
-    numTargets = 0
-    numPackages = 0
-
-    def outLineReceived(self, line):
-        if line.startswith('finished target '):
-            self.numTargets += 1
-            self.step.setProgress('targets', self.numTargets)
-            if line.strip().endswith('.targetinstall'):
-                self.numPackages += 1
-                self.step.setProgress('packages', self.numPackages)
-
-
-class PTXDistBuild(steps.ShellCommand):
-
+class PTXDistBuild(steps.ShellSequence):
     def __init__(self, **kwargs):
         kwargs.setdefault('haltOnFailure', True)
         kwargs.setdefault('flunkOnFailure', True)
 
-        steps.ShellCommand.__init__(self, **kwargs)   # always upcall!
-        counter = PTXDistBuildCounter()
-        self.addLogObserver('stdio', counter)
-        self.progressMetrics += ('targets', 'packages')
-
-git_lock = util.MasterLock("git")
-
-from datetime import datetime
+        steps.ShellSequence.__init__(self, **kwargs)
+
+        self.name = "PTXDist Build"
+        self.description = "building"
+        self.descriptionDone = "built"
+        self.commands = [
+            # set ptxdist build platform
+            util.ShellArg(
+                haltOnFailure=True,
+                command=[
+                    "ptxdist",
+                    "platform",
+                    util.Property("platform")
+                ]),
+
+            # set ptxdist target
+            util.ShellArg(
+                haltOnFailure=True,
+                command=[
+                    "ptxdist",
+                    "select",
+                    util.Property('project')
+                ]),
+
+            # run ptxdist build with build.py
+            util.ShellArg(
+                logfile="ptxdist build",
+                haltOnFailure=True,
+                command=util.FlattenList([
+                    "python",
+                    "scripts/build.py",
+                    "--noclean",
+                    "--noconfirm",
+                    util.Property("version"),
+                    util.Interpolate("%(prop:release:#?|release|beta)s"),
+                    util.Transform(
+                        string.split,
+                        util.Property(
+                            "packages",
+                            default='')
+                    )
+                ])),
+
+            util.ShellArg(
+                logfile="archive",
+                haltOnFailure=True,
+                command=[
+                    "tar", "-v", "-c", "-z",
+                    "-C", util.Property("ipkg_root"),
+                    "-f", util.Interpolate("%(prop:artifact_dest)s/%(prop:ipkg_artifact)s"),
+                    util.Property("project")
+                ]),
+        ]
+
+
+class PTXDistImages(steps.ShellSequence):
 
+    def __init__(self, **kwargs):
+        kwargs.setdefault('haltOnFailure', True)
+        kwargs.setdefault('flunkOnFailure', True)
 
-@util.renderer
-def CurrentTime(props):
+        steps.ShellSequence.__init__(self, **kwargs)
+
+        self.name = "PTXDist Images"
+        self.description = "making images"
+        self.descriptionDone = "images"
+        self.commands = [
+            util.ShellArg(
+                haltOnFailure=True,
+                command=[
+                    "ptxdist",
+                    "collection",
+                    util.Property("collection")
+                ]),
+
+            util.ShellArg(
+                logfile="ptxdist images",
+                haltOnFailure=True,
+                command=["ptxdist", "images"],
+            ),
+
+            util.ShellArg(
+                logfile="archive",
+                haltOnFailure=True,
+                command=[
+                    "tar", "-v", "-c", "-z",
+                    "-C", util.Property("image_root"),
+                    "-f", util.Interpolate("%(prop:artifact_dest)s/%(prop:image_artifact)s"),
+                    "."
+                ]
+            ),
+        ]
+
+
+def CurrentTime():
+    from datetime import datetime
     import string
     dt = datetime.now()
     dt.replace(microsecond=0)
@@ -148,43 +245,83 @@ def CurrentTime(props):
     return dts
 
 
-class PTXDistFactory(util.BuildFactory):
-
-    def __init__(self, repourl, branch, platform):
-        util.BuildFactory.__init__(self)
-        self.addStep(steps.SetProperty('platform', platform))
-        self.addStep(steps.SetProperty(
-            'select', util.Interpolate("OrionLX-%(prop:platform)s-glibc")))
-        self.addStep(steps.SetProperty('timestamp', CurrentTime))
-        self.addStep(steps.SetProperty('dest', util.Interpolate(
-            "/cache/images/%(prop:buildername)s/%(prop:timestamp)s")))
-        self.addStep(steps.Git(repourl=repourl, branch=branch, mode="full",
-                               method="clobber", locks=[git_lock.access('exclusive')], retry=(360, 5)))
-        self.addStep(steps.ShellCommand(
-            command=["mkdir", "-p", util.Property('dest')]))
-        self.addStep(PTXDistBuild(
-            command=["ptxdist", "platform", util.Property("platform")]))
-        self.addStep(PTXDistBuild(
-            command=["ptxdist", "select", util.Property("select")]))
-        self.addStep(PTXDistBuild(command=["ptxdist", "go"]))
-        self.addStep(PTXDistBuild(command=["ptxdist", "make", "ipkg-push"]))
-        self.addStep(PTXDistBuild(command=["./scripts/ipkg-header"]))
-
-# current_armeb_xscale #
-current_armeb_xscale_factory = PTXDistFactory(
-    worker_ptxdist_repourl, worker_ptxdist_branch, 'armeb-xscale')
-# check out the source
-current_armeb_xscale_factory.addStep(PTXDistBuild(
-    command=["ptxdist", "collection", "armeb-base"]))
-current_armeb_xscale_factory.addStep(
-    PTXDistBuild(command=["ptxdist", "images"]))
-current_armeb_xscale_factory.addStep(steps.ShellCommand(
-    command=["cp", "platform-armeb-xscale/images/root.jffs2_64", util.Property('dest')]))
-current_armeb_xscale_factory.addStep(steps.ShellCommand(
-    command=["cp", "platform-armeb-xscale/images/root.jffs2_128", util.Property('dest')]))
-# current_armeb_xscale_factory.addStep(steps.ShellCommand(command=["./scripts/build-upgrade-test.sh"]))
-# current_armeb_xscale_factory.addStep(steps.ShellCommand(command=["curl", "--progress-bar", "-o", "/dev/null", "http://george:1234@172.16.190.70/outlet?1=CCL"]))
-# current_armeb_xscale_factory.addStep(steps.ShellCommand(command=[
+@util.renderer
+def ComputeBuildProperties(props):
+    newprops = {}
+
+    newprops['timestamp'] = CurrentTime()
+
+    version = props.getProperty('version', default=timestamp)
+
+    newprops['project'] = "OrionLX-%s-glibc" % (
+        props.getProperty("platform")
+    )
+
+    newprops['artifact_dest'] = "/cache/artifacts/%s" % (
+        version,
+    )
+
+    newprops['image_root'] = "%s/build/platform-%s/images" % (
+        props.getProperty("builddir"),
+        props.getProperty("platform"),
+    )
+
+    newprops['image_artifact'] = "%s-%s.images.tar.gz" % (
+        newprops['project'],
+        version,
+    )
+
+    newprops['ipkg_root'] = "/cache/ipkg-repository"
+
+    newprops['ipkg_repo'] = "%s/%s" % (
+        newprops['ipkg_root'],
+        newprops['project'],
+    )
+
+    newprops['ipkg_artifact'] = "%s-%s.ipkg.tar.gz" % (
+        newprops['project'],
+        version,
+    )
+
+    newprops['collection'] = collections.get(
+        props.getProperty('platform')
+    )
+
+    return newprops
+
+
+def isReleaseBuild(step):
+    if step.getProperty("release") is True:
+        return True
+    return False
+
+# Create build factory for ptxdist
+ptxdist_factory = util.BuildFactory(
+    steps.SetProperties(ComputeBuildProperties),
+
+    steps.MakeDirectory(dir=util.Property('artifact_dest')),
+
+    steps.MakeDirectory(dir=util.Property('ipkg_repo')),
+
+    # check out the source
+    steps.Git(
+        codebase=util.Property('codebase'),
+        repourl=util.Property('repository'),
+        branch=util.Property('branch'),
+        mode=util.Interpolate("%(prop:clobber:#?|full|incremental)s"),
+        method="clobber",
+    ),
+
+    PTXDistBuild(),
+
+    PTXDistImages(
+        doStepIf=isReleaseBuild,
+    ),
+)
+
+# ptxdist_factory.addStep(steps.ShellCommand(command=["./scripts/build-upgrade-test.sh"]))
+# ptxdist_factory.addStep(steps.ShellCommand(command=["curl", "--progress-bar", "-o", "/dev/null", "http://george:1234@172.16.190.70/outlet?1=CCL"]))
+# ptxdist_factory.addStep(steps.ShellCommand(command=[
 # 	"./scripts/upgradetest.py",
 # 	"load_7_upgrade_to_8",
 # 	"/srv/tftp/root.jffs2_64",
@@ -196,8 +333,8 @@ current_armeb_xscale_factory.addStep(steps.ShellCommand(
 # 	"orionpythontests",
 # 	"orionprotocoltests",
 # 	"--orion-config", "./local-pkg/buildslave_config_armeb-xscale.tar.gz"]))
-# current_armeb_xscale_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_armeb_xscale']))
-# current_armeb_xscale_factory.addStep(trigger.Trigger(schedulerNames=['remote_tests_armeb_xscale']))
+# ptxdist_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_armeb_xscale']))
+# ptxdist_factory.addStep(trigger.Trigger(schedulerNames=['remote_tests_armeb_xscale']))
 
 # local_tests_armeb_xscale #
 local_tests_armeb_xscale_factory = util.BuildFactory()
@@ -212,33 +349,21 @@ local_tests_armeb_xscale_factory.addStep(steps.ShellCommand(
 remote_tests_armeb_xscale_factory = util.BuildFactory()
 # check out the source
 remote_tests_armeb_xscale_factory.addStep(steps.Git(repourl=acceptance_test_repourl, alwaysUseLatest=True,
-                                                    mode="incremental", method="clobber", locks=[git_lock.access('exclusive')], retry=(120, 5)))
+                                                    mode="incremental", method="clobber", retry=(120, 5)))
 remote_tests_armeb_xscale_factory.addStep(steps.ShellCommand(
     command=["py.test", "-s", "--orion=172.16.64.150", "--hub-address=172.16.64.25:4444", "--browser=chrome"], workdir='build/WebUI'))
 
 # current_i686 #
-current_i686_factory = PTXDistFactory(
-    worker_ptxdist_repourl, worker_ptxdist_branch, 'i686')
-# check out the source
-current_i686_factory.addStep(PTXDistBuild(
-    command=["ptxdist", "collection", "i686-base"]))
-current_i686_factory.addStep(PTXDistBuild(command=["ptxdist", "images"]))
-current_i686_factory.addStep(steps.ShellCommand(
-    command=["gzip", "-f", "platform-i686/images/hd.img"]))
-current_i686_factory.addStep(steps.ShellCommand(
-    command=["cp", "platform-i686/images/hd.img.gz", util.Property('dest')]))
+# current_i686_factory.addStep(steps.ShellCommand(
+#     command=["gzip", "-f", "platform-i686/images/hd.img"]))
+# current_i686_factory.addStep(steps.ShellCommand(
+#     command=["cp", "platform-i686/images/hd.img.gz", util.Property('dest')]))
 # current_i686_factory.addStep(trigger.Trigger(schedulerNames=['upgrade_i686']))
 # current_i686_factory.addStep(steps.ShellCommand(command=["sleep", "120"]))
 # current_i686_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_i686']))
 # current_i686_factory.addStep(trigger.Trigger(schedulerNames=['remote_tests_i686']))
 
 # current_am335x #
-current_am335x_factory = PTXDistFactory(
-    worker_ptxdist_repourl, worker_ptxdist_branch, 'am335x')
-# check out the source
-current_am335x_factory.addStep(PTXDistBuild(
-    command=["ptxdist", "collection", "am335x-base"]))
-current_am335x_factory.addStep(PTXDistBuild(command=["ptxdist", "images"]))
 # current_am335x_factory.addStep(trigger.Trigger(schedulerNames=['upgrade_am335x']))
 # current_am335x_factory.addStep(steps.ShellCommand(command=["sleep", "120"]))
 # current_am335x_factory.addStep(trigger.Trigger(schedulerNames=['local_tests_am335x']))
@@ -263,7 +388,7 @@ local_tests_i686_factory.addStep(steps.ShellCommand(
 # remote_tests_i686 #
 remote_tests_i686_factory = util.BuildFactory()
 remote_tests_i686_factory.addStep(steps.Git(repourl=acceptance_test_repourl, alwaysUseLatest=True,
-                                            mode="incremental", method="clobber", locks=[git_lock.access('exclusive')], retry=(120, 5)))
+                                            mode="incremental", method="clobber", retry=(120, 5)))
 remote_tests_i686_factory.addStep(steps.ShellCommand(command=[
                                   "py.test", "-s", "--orion=172.16.65.100", "--hub-address=172.16.64.25:4444", "--browser=chrome"], workdir='build/WebUI'))
 
@@ -286,54 +411,64 @@ local_tests_am335x_factory.addStep(steps.ShellCommand(
 # remote_tests_am335x #
 remote_tests_am335x_factory = util.BuildFactory()
 remote_tests_am335x_factory.addStep(steps.Git(repourl=acceptance_test_repourl, alwaysUseLatest=True,
-                                              mode="incremental", method="clobber", locks=[git_lock.access('exclusive')], retry=(120, 5)))
+                                              mode="incremental", method="clobber", retry=(120, 5)))
 remote_tests_am335x_factory.addStep(steps.ShellCommand(command=[
                                     "py.test", "-s", "--orion=172.16.190.72", "--hub-address=172.16.64.25:4444", "--browser=chrome"], workdir='build/WebUI'))
 
-from buildbot.config import BuilderConfig
-
 builders = []
 builders.append(
-    BuilderConfig(name="current_armeb_xscale",
+    BuilderConfig(name="force-armeb-xscale",
+                  workernames=["worker-ptxdist"],
+                  factory=ptxdist_factory,
+                  properties={
+                      'platform': 'armeb-xscale',
+                  }))
+builders.append(
+    BuilderConfig(name="force-i686",
                   workernames=["worker-ptxdist"],
-                  factory=current_armeb_xscale_factory))
+                  factory=ptxdist_factory,
+                  properties={
+                      'platform': 'i686',
+                  }))
+builders.append(
+    BuilderConfig(name="force-am335x",
+                  workernames=["worker-ptxdist"],
+                  factory=ptxdist_factory,
+                  properties={
+                      'platform': 'am335x',
+                  }))
+
 builders.append(
     BuilderConfig(name="local_tests_armeb_xscale",
                   workernames=["orion-armeb-xscale-slave"],
                   factory=local_tests_armeb_xscale_factory))
+builders.append(
+    BuilderConfig(name="local_tests_i686",
+                  workernames=["orion-i686-slave"],
+                  factory=local_tests_i686_factory))
+builders.append(
+    BuilderConfig(name="local_tests_am335x",
+                  workernames=["orion-am335x-slave"],
+                  factory=local_tests_am335x_factory))
+
 builders.append(
     BuilderConfig(name="remote_tests_armeb_xscale",
                   workernames=["worker-ptxdist"],
                   factory=remote_tests_armeb_xscale_factory))
 builders.append(
-    BuilderConfig(name="current_i686",
+    BuilderConfig(name="remote_tests_i686",
                   workernames=["worker-ptxdist"],
-                  factory=current_i686_factory))
+                  factory=remote_tests_i686_factory))
 builders.append(
-    BuilderConfig(name="current_am335x",
+    BuilderConfig(name="remote_tests_am335x",
                   workernames=["worker-ptxdist"],
-                  factory=current_am335x_factory))
+                  factory=remote_tests_am335x_factory))
+
 builders.append(
     BuilderConfig(name="upgrade_i686",
                   workernames=["orion-i686-slave"],
                   factory=upgrade_i686_factory))
-builders.append(
-    BuilderConfig(name="local_tests_i686",
-                  workernames=["orion-i686-slave"],
-                  factory=local_tests_i686_factory))
-builders.append(
-    BuilderConfig(name="remote_tests_i686",
-                  workernames=["worker-ptxdist"],
-                  factory=remote_tests_i686_factory))
 builders.append(
     BuilderConfig(name="upgrade_am335x",
                   workernames=["orion-am335x-slave"],
                   factory=upgrade_am335x_factory))
-builders.append(
-    BuilderConfig(name="local_tests_am335x",
-                  workernames=["orion-am335x-slave"],
-                  factory=local_tests_am335x_factory))
-builders.append(
-    BuilderConfig(name="remote_tests_am335x",
-                  workernames=["worker-ptxdist"],
-                  factory=remote_tests_am335x_factory))
diff --git a/roles/buildbot-worker-ptxdist/defaults/main.yml b/roles/buildbot-worker-ptxdist/defaults/main.yml
new file mode 100644
index 00000000..ebe2d7ed
--- /dev/null
+++ b/roles/buildbot-worker-ptxdist/defaults/main.yml
@@ -0,0 +1,87 @@
+---
+# defaults file for buildbot-worker-ptxdist
+
+# host containing build assets
+asset_host: 'http://{{ansible_facts.default_ipv4.address}}/'
+
+# address of buildbot master service
+buildbot_master: '{{ansible_facts.default_ipv4.address}}'
+
+# numeric ID of buildbot user
+buildbot_uid: 1000
+
+# numeric version of buildbot service
+buildbot_version: '1.2.0'
+
+# port number for workers to communicate with master
+buildbot_worker_port: 9989
+
+# host path containing configuration files
+config_hostdir: '{{ docker_restore_config_base_dir }}/{{ container_name }}'
+
+# mount path of the cache volume
+cache_path: '/cache'
+
+# name of the cache volume
+cache_volume: '{{ docker_name_prefix }}{{ container_hostname }}-cache'
+
+# environment passed to the container
+container_env:
+  BUILDBOT_KNOWN_HOSTS_FILE: '{{secrets_path}}/{{secrets_known_hosts}}'
+  BUILDBOT_MASTER: '{{ buildbot_master }}'
+  BUILDBOT_WORKER_PORT: '{{ buildbot_worker_port }}'
+  BUILDBOT_WORKER_NAME: 'worker-ptxdist'
+  BUILDBOT_WORKER_PASS: 'pass'
+
+# container_hostname
+container_hostname: '{{ role_name }}'
+
+# the name of the container being started
+container_name: '{{ docker_name_prefix }}{{ container_hostname }}'
+
+# network configuration for the confainer
+container_networks: []
+
+# port configuration of the container
+container_port_args: []
+
+# volumes mounted within the container
+container_volumes:
+- '{{ data_volume }}:{{ data_path }}:z'
+- '{{ cache_volume }}:{{ cache_path }}:z'
+- '{{ secrets_hostdir }}:{{ secrets_path }}'
+- '{{ config_hostdir }}/pydistutils.cfg:/home/buildbot/.pydistutils.cfg'
+- '{{ config_hostdir }}/ptxdistrc:/home/buildbot/.ptxdist/ptxdistrc-2012.09'
+- '{{ config_hostdir }}/netrc:/home/buildbot/.netrc'
+
+# mount path of the data volume
+data_path: '/buildbot'
+
+# name of the data volume
+data_volume: '{{ docker_name_prefix }}{{ container_hostname }}-data'
+
+# address of hsm cryptographic service
+hsm_host: '{{ansible_facts.default_ipv4.address}}'
+
+# build arguments of the image
+image_args:
+  BUILDBOT_UID: '{{buildbot_uid}}'
+  BUILDBOT_VERSION: 'v{{buildbot_version}}'
+
+# directory of the image source
+image_dir: '{{ docker_projects_dir }}/{{ container_hostname }}'
+
+# name of the image being built
+image_name: '{{ docker_registry_username }}/{{ container_hostname }}'
+
+# repository URI of the image source
+image_repo: '{{ buildbot_worker_ptxdist_image_repo | default("https://github.com/novatechweb/docker-buildbot-worker-ptxdist.git") }}'
+
+# host path containing secrets
+secrets_hostdir: '{{ config_hostdir }}'
+
+# name of the ssh known_hosts secret
+secrets_known_hosts: 'known_hosts'
+
+# mount path of the secrets volume
+secrets_path: '/run/secrets'
diff --git a/roles/buildbot-worker-ptxdist/tasks/main.yml b/roles/buildbot-worker-ptxdist/tasks/main.yml
new file mode 100644
index 00000000..b78c2af0
--- /dev/null
+++ b/roles/buildbot-worker-ptxdist/tasks/main.yml
@@ -0,0 +1,118 @@
+---
+# tasks file for buildbot-worker-ptxdist
+
+# This will generate passwords for these accounts.
+- assert:
+    that:
+    - buildbot_worker_ptxdist_password is defined
+
+- name: Create buildbot cache volume
+  docker_volume:
+    name: '{{ cache_volume }}'
+
+- name: Populate buildbot cache volume
+  loop:
+  - /cache
+  - /cache/ccache
+  - /cache/downloads
+  - /cache/images
+  - /cache/ipkg-repository
+  - /cache/releases
+  docker_container:
+    name: '{{ container_name }}-bootstrap'
+    image: 'alpine:latest'
+    volumes:
+    - '{{ cache_volume }}:{{ cache_path }}:z'
+    detach: no
+    cleanup: yes
+    command: /bin/ash -c
+      "mkdir -p {{item}} &&
+      chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}} &&
+      chmod -v 777 {{item}}"
+
+- name: Create buildbot data volume
+  docker_volume:
+    name: '{{ data_volume }}'
+
+- name: Populate buildbot data volume
+  loop:
+  - /buildbot
+  docker_container:
+    name: '{{ container_name }}-bootstrap'
+    image: 'alpine:latest'
+    volumes:
+    - '{{ data_volume }}:{{ data_path }}:z'
+    detach: no
+    cleanup: yes
+    command: /bin/ash -c
+      "mkdir -p {{item}} &&
+      if [ $(stat -c '%u' '{{item}}') -ne {{buildbot_uid}} ]; then
+        chown -c -R {{buildbot_uid}}:{{buildbot_uid}} {{item}};
+      fi"
+
+- name: Create configuration directory
+  file:
+    path: '{{ config_hostdir }}'
+    state: directory
+
+- name: Generate distutils configuration
+  template:
+    src: pydistutils.cfg.j2
+    dest: '{{ config_hostdir }}/pydistutils.cfg'
+    group: '{{ buildbot_uid }}'
+    owner: '{{ buildbot_uid }}'
+
+- name: Generate PTXdist configuration
+  template:
+    src: ptxdistrc.j2
+    dest: '{{ config_hostdir }}/ptxdistrc'
+    group: '{{ buildbot_uid }}'
+    owner: '{{ buildbot_uid }}'
+
+- name: Populate assets secret
+  template:
+    src: "netrc.j2"
+    dest: '{{ config_hostdir }}/netrc'
+    group: '{{ buildbot_uid }}'
+    owner: '{{ buildbot_uid }}'
+    mode: "u=rw,g=,o="
+
+- name: Checkout image repo
+  git:
+    repo: '{{ image_repo }}'
+    version: master
+    dest: '{{ image_dir }}'
+    force: yes
+
+- template:
+    src: pydistutils.cfg.j2
+    dest: '{{ image_dir }}/buildbot/.pydistutils.cfg'
+
+- name: Create buildbot worker image
+  docker_image:
+    name: '{{ image_name }}'
+    tag: '{{ docker_image_tag }}'
+    path: '{{ image_dir }}'
+    buildargs: '{{ image_args }}'
+    force: true
+
+- name: Start buildbot worker container
+  docker_container:
+    hostname: '{{ container_hostname }}'
+    name: '{{ container_name }}'
+    image: '{{ image_name }}:{{ docker_image_tag }}'
+    networks: '{{ container_networks }}'
+    volumes: '{{ container_volumes }}'
+    env: '{{ container_env }}'
+    ports: '{{ container_port_args }}'
+
+- name: Grab ssh public key
+  command: >
+    docker exec '{{ container_name }}' cat /home/buildbot/.ssh/id_rsa.pub
+  changed_when: false
+  register: output
+
+- name: Add buildbot worker host
+  add_host:
+    name: "{{ container_hostname }}"
+    pubkey: "{{ output.stdout }}"
diff --git a/roles/buildbot-worker-ptxdist/vars/main.yml b/roles/buildbot-worker-ptxdist/vars/main.yml
new file mode 100644
index 00000000..ae5fa61c
--- /dev/null
+++ b/roles/buildbot-worker-ptxdist/vars/main.yml
@@ -0,0 +1,2 @@
+---
+# vars file for buildbot-worker-ptxdist
\ No newline at end of file
