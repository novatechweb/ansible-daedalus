---
# file: roles/docker-gitlab/tasks/restore.yaml

# *****************************************************************************
# Get data from tape

- name: find files
  find:
    path: '{{ gitlab_docker_restore_dir }}'
    file_type: any
  register: gitlab_backup

- name: data from tape
  bacula:
    command: restore
    storage: '{{ bacula_storage }}'
    fileset: '{{ bacula_fileset }}'
    dest: '{{ bacula_dest }}'
    path_to_restore: '{{ gitlab_docker_backup_dir }}'
  when: gitlab_backup.matched == 0

- name: find files
  find:
    path: '{{ gitlab_docker_restore_dir }}'
    file_type: any
    follow: yes
  register: gitlab_backup

- name: File permissions
  file:
    path: '{{ gitlab_docker_restore_dir }}/{{ item }}'
    state: touch
    owner: root
    group: root
    mode: 'u=rwx,g=rwx,o='
  with_items: '{{ gitlab_backup.file_list | default([]) }}'

# *****************************************************************************
# restore the gitlab backup

- name: Copy backup files to container
  copy:
    remote_src: yes
    src: '{{ item.path }}'
    dest: '{{ gitlab_docker_backup_dir }}/'
    owner: root
    group: root
    mode: 'u=rwx,g=rwx,o=rwx'
  loop: "{{ gitlab_backup.files }}"

- name: shut down gitlab services for restoration
  command: >
    docker exec -t {{ gitlab_container_name }} gitlab-ctl stop {{ item }}
  loop:
  - unicorn
  - sidekiq

- name: gitlab restore script
  command: >
    docker exec -t {{ gitlab_container_name }}
    /bin/sh -c 'tar vxzf /mnt/backups/etc-gitlab-*.tgz -C /' 

- name: gitlab restore script
  command: >
    docker exec -t {{ gitlab_container_name }}
    gitlab-rake gitlab:backup:restore force=yes

- name: reconfigure gitlab for updated configuration
  command: >
    docker exec -t {{ gitlab_container_name }} gitlab-ctl reconfigure

- name: restart gitlab services
  command: >
    docker exec -t {{ gitlab_container_name }} gitlab-ctl start

- name: Set root user password in restored database
  command: >
    docker exec -t {{ gitlab_container_name }} 
    gitlab-rails runner 
      'user=User.where(id: 1).first;
       user.password="{{ gitlab_root_password }}";
       user.password_confirmation="{{ gitlab_root_password }}";
       user.save!'

# *****************************************************************************
# cleanup

- name: Remove files
  file:
    path: '{{ gitlab_docker_restore_dir }}'
    state: absent

- name: State file
  shell: 'date --rfc-3339=seconds > {{ gitlab_config_dir }}/restore.date.txt'
  when: st_gitlab_restore.stat.exists == False
