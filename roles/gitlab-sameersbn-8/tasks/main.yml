---
# file: roles/docker-gitlab/tasks/main.yaml

- assert:
    that:
    - gitlab_db_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

# - name: restore dir
#   file:
#     state: directory
#     path: '{{ gitlab_docker_restore_dir }}'
#     owner: root
#     group: tape
#     mode: 'u=rwx,g=rwx,o=rx'
#     recurse: no
#     setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

# - name: Assemble dir for backup scripts
#   file:
#     path: /usr/libexec/bacula/backup-scripts
#     state: directory

# - name: before_backup script part
#   template:
#     src: before_backup.j2
#     dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab

# - name: after_backup script part
#   template:
#     src: after_backup.j2
#     dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab

# *****************************************************************************
# update the Docker restore config

# contains the database username and password
# - name: make config.sh
#   template:
#     src: config.sh.j2
#     dest: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/config.sh'
#     backup: yes
#     owner: root
#     group: tape
#     mode: 'u=rw,g=r,o='

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_gitlab_restore

# *****************************************************************************
# upgrade?

- include_tasks: upgrade.yml
  when:
  - upgrade == True
  - st_gitlab_restore.stat.exists == False

# *****************************************************************************
# Update or make the image.

- name: Checkout image repo
  git:
    repo: '{{ gitlab_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-gitlab'

- name: copy env-file
  command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.env.list {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'

# - name: copy script
#   command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.sh {{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}'

# - name: build image
#   docker_image:
#     name: '{{ gitlab_image_name }}'
#     tag: '{{ docker_image_tag }}'
#     path: '{{ docker_projects_dir }}/docker-gitlab'
#     force: "{{ docker_image_force_build }}"

# *****************************************************************************
# Create the data volumes

- name: data-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_dv_name }}'

- name: data-volume container (postgres)
  docker_volume:
    name: '{{ gitlab_db_dv_name }}'

# *****************************************************************************
# Start the data container running

- name: start container (redis)
  docker_container:
    name: '{{ gitlab_redis_container_name }}'
    detach: true
    restart_policy: '{{ docker_restart_policy }}'
    image: '{{ redis_image_name }}:{{ redis_image_tag }}'
    networks:
      - name: '{{ docker_network_frontend }}'

- name: start container (postgres)
  docker_container:
    name: '{{ gitlab_db_container_name }}'
    detach: true
    restart_policy: '{{ docker_restart_policy }}'
    volumes:
    - '{{ gitlab_db_dv_name }}:/var/lib/postgresql/data'
    image: '{{ gitlab_db_image_name }}:{{ gitlab_db_image_tag }}'
    networks:
    - name: '{{ docker_network_frontend }}'
    env:
      POSTGRES_DB: "gitlabhq_production"
      POSTGRES_USER: "{{ gitlab_db_user }}"
      POSTGRES_PASSWORD: "{{ gitlab_db_password | quote }}"

- name: Wait for container (postgres)
  command: >
    docker exec --user postgres
    {{ gitlab_db_container_name }}
    psql -l
  register: output
  retries: 10
  delay: 3
  until: output.rc == 0

- name: create container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    detach: true
    restart_policy: '{{ docker_restart_policy }}'
    hostname: '{{ gitlab_hostname }}'
    ports: '{{ gitlab_port_args }}'
    networks:
    - name: '{{ docker_network_frontend }}'
    volumes:
    - '{{ openssl_dv_name }}:/etc/ssl/private:ro'
    - '{{ gitlab_dv_name }}:/home/git/data'
    - '{{ gitlab_docker_backup_dir }}:/home/git/backups'
    env:
      DEBUG: 'true'
      GITLAB_TIMEZONE: "America/Chicago"
      GITLAB_HOST: "{{ gitlab_hostname }}"
      GITLAB_SSH_HOST: "{{ gitlab_hostname }}"
      DB_HOST: "{{ gitlab_db_container_name }}"
      DB_USER: "{{ gitlab_db_user }}"
      DB_PASS: "{{ gitlab_db_password | quote }}"
      REDIS_HOST: "{{ gitlab_redis_container_name }}"
      SMTP_HOST: "{{ exim4_hostname }}"
      SMTP_PASS: "{{ gitlab_email_password | quote }}"
      LDAP_PASS: "{{ openldap_proxyagent_password | quote }}"
      GITLAB_ROOT_PASSWORD: "{{ gitlab_root_password | quote }}"
      GITLAB_SECRETS_DB_KEY_BASE: "{{ gitlab_secrets_db_key_base | quote }}"
      SSL_DHPARAM_PATH: /etc/ssl/private/dhparam.pem
    env_file: '{{ docker_restore_config_base_dir }}/{{ gitlab_dv_name }}/gitlab.env.list'
    image: '{{ gitlab_image_name }}'
    state: present

- name: copy updated secrets.yml to gitlab
  block:
  - copy:
      src: secrets.yml
      dest: /tmp/secrets.yml
  - command: >
      docker cp /tmp/secrets.yml
      "{{gitlab_container_name}}:/etc/docker-gitlab/runtime/config/gitlabhq/secrets.yml"
  
- name: start container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    state: started

- name: Wait for gitlab to be fully running
  uri:
    url: 'http://{{ gitlab_hostname }}/users/sign_in'
  register: health
  retries: 60
  delay: 5
  until: health.status == 200

# *****************************************************************************
# Create container registry directory
- name: Create container registry directory
  command: >
    docker exec -u git {{gitlab_container_name}} mkdir -p /home/git/data/shared/registry



# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_gitlab_restore.stat.exists == False
