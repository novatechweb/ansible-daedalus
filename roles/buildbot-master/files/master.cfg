# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

import os
from buildbot.plugins import reporters, secrets, steps, util
from buildbot.util import giturlparse

os.environ['LONG_RUN_TIMEOUT'] = '14400'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['workers'] = []
c['schedulers'] = []
c['builders'] = []
c['change_source'] = []

# Defines the TCP port to listen on for connections from workers.
# This must match the value configured into the buildworkers (with their
# --master option)
c['protocols'] = {"pb": {"port": int(os.getenv('BUILDBOT_WORKER_PORT', 9989))}}

# SECRETS MANAGEMENT
c['secretsProviders'] = [secrets.SecretInAFile(dirname="/run/secrets")]

# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['services'] = []

irc = reporters.IRC(
    allowForce=False,
    allowShutdown=False,
    channels=os.getenv("BUILDBOT_IRC_CHANNELS").split(','),
    host=os.getenv("BUILDBOT_IRC_HOST"),
    nick=os.getenv("BUILDBOT_IRC_NICK"),
    notify_events=[],
    password=os.getenv("BUILDBOT_IRC_PASS"),
    port=6697,
    useColors=True,
    useSSL=True
)
c['services'].append(irc)

mn = reporters.MailNotifier(
    fromaddr="buildbot@novatechweb.com",
    sendToInterestedUsers=True,
    extraRecipients=["andrew.cooper@novatechweb.com"],
    useTls=True,
    relayhost=os.getenv('BUILDBOT_SMTP_HOST'),
    smtpPort=int(os.getenv('BUILDBOT_SMTP_PORT')),
    smtpUser=os.getenv('BUILDBOT_SMTP_USER'),
    smtpPassword=os.getenv('BUILDBOT_SMTP_PASS')
)
c['services'].append(mn)

gl = reporters.GitLabStatusPush(
    os.getenv('GITLAB_TOKEN'),
    context="Buildbot CI",
    baseURL=os.getenv("GITLAB_URI"),
    verbose=True,
    debug=True
)
c['services'].append(gl)

userInfoProvider = util.LdapUserInfo(
    uri=os.getenv('LDAP_URI'),
    bindUser=os.getenv('LDAP_BIND_USER'),
    bindPw=os.getenv('LDAP_BIND_PW'),
    accountBase='ou=user,dc=novatech',
    groupBase='ou=group,dc=novatech',
    accountPattern='(&(objectClass=inetOrgPerson)(uid=%(username)s))',
    accountFullName='displayName',
    accountEmail='mail',
    groupMemberPattern='(&(objectClass=groupOfNames)(member=%(dn)s))',
    groupName='cn',
    accountExtraFields=['employeeType'],
)

# WEB SERVER
c['www'] = {
    'port': int(os.getenv('BUILDBOT_WEB_PORT', 8010)),
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
        'grid_view': True,
    },
    'auth': util.GitLabAuth(
        os.getenv('GITLAB_URI'),
        os.getenv('GITLAB_OAUTH_ID'),
        os.getenv('GITLAB_OAUTH_SECRET'),
        userInfoProvider=userInfoProvider),
    'authz': util.Authz(
        allowRules=[
            # admins can do anything,
            # defaultDeny=False: if user does not have the admin role, we continue parsing rules
            util.AnyEndpointMatcher(role="admins", defaultDeny=False),
        ],
        roleMatchers=[
            util.RolesFromUsername(
                roles=['admins'],
                usernames=[
                    "george.mccollister",
                    "joseph.lutz",
                    "andrew.cooper",
                ]),
        ],
    ),
    'change_hook_dialects': {
        'gitlab': {
            'secret': os.getenv('GITLAB_WEBHOOK_SECRET')
        }
    }
}

# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NovaTech CI"
c['titleURL'] = "http://git.novatech-llc.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = os.getenv('BUILDBOT_WEB_URL', "http://localhost:%s/" % (c['www']['port']))

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.getenv('BUILDBOT_DATABASE', "sqlite://"),
}

# Extra Options
c['buildbotNetUsageData'] = 'basic'

import openembedded
reload(openembedded)
c['workers'].extend(openembedded.WorkerConfig['workers'])
c['schedulers'].extend(openembedded.WorkerConfig['schedulers'])
c['builders'].extend(openembedded.WorkerConfig['builders'])
c['change_source'].extend(openembedded.WorkerConfig['change_source'])

import ptxdist
reload(ptxdist)
c['workers'].extend(ptxdist.workers)
c['schedulers'].extend(ptxdist.schedulers)
c['builders'].extend(ptxdist.builders)
c['change_source'].extend(ptxdist.change_source)


def codebaseGenerator(chdict):
    """ Generate a codebase description.

    The codebase generator takes information about a change, like repository,
    branch, and revision, and creates a predictable string describing the code.
    This is used to decide upon the builder for a change and also to tie a fork
    repository back to its parent for merge requests.
    """

    giturl = giturlparse(chdict['repository'])
    return giturl.owner

    # path = urlparse(chdict['revlink']).path.lstrip('/')

    # components = []
    # while path != "":
    #     path, tail = os.path.split(path)
    #     if tail != "":
    #         components.append(tail)
    # components.reverse()
    # codebase = os.path.join(*components[0:2])
    # return codebase


c['codebaseGenerator'] = codebaseGenerator
