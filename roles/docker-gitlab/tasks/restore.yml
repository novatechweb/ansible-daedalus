---
# file: roles/docker-gitlab/tasks/restore.yaml

# *****************************************************************************
# Get data from tape

- name: find files
  files_in_dir:
    path: '{{ gitlab_docker_restore_dir }}'
  register: gitlab_backup

- name: data from tape
  bacula:
    command: restore
    storage: '{{ bacula_storage }}'
    fileset: '{{ bacula_fileset }}'
    dest: '{{ bacula_dest }}'
    path_to_restore: '{{ gitlab_docker_backup_dir }}'
  when: gitlab_backup.file_list == []

- name: find files
  files_in_dir:
    path: '{{ gitlab_docker_restore_dir }}'
  register: gitlab_backup

# - name: File permissions
#   file:
#     path: '{{ gitlab_docker_restore_dir }}/{{ item }}'
#     state: touch
#     owner: root
#     group: root
#     mode: 'u=rwx,g=rwx,o='
#   with_items: '{{ gitlab_backup.file_list | default([]) }}'

# *****************************************************************************
# restore the gitlab backup

- name: Copy backup file to container
  copy:
    remote_src: yes
    src: '{{ gitlab_docker_restore_dir }}/{{ gitlab_backup.file_list | first}}'
    dest: '{{ gitlab_docker_backup_dir }}/'
    owner: root
    group: root
    mode: 'u=rwx,g=rwx,o=rwx'

- name: gitlab restore script
  command: >
    docker exec -t {{ gitlab_container_name }} /bin/sh -c
    'gitlab-ctl stop unicorn && gitlab-ctl stop sidekiq && gitlab-rake gitlab:backup:restore force=yes'
  when: gitlab_backup.file_list != []

# *****************************************************************************
# cleanup

- name: Remove files
  file:
    path: '{{ gitlab_docker_restore_dir }}'
    state: absent

- name: State file
  shell: 'date --rfc-3339=seconds > {{ gitlab_config_dir }}/restore.date.txt'
  when: st_gitlab_restore.stat.exists == False
