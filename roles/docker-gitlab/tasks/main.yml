---
# file: roles/docker-gitlab/tasks/main.yaml

- assert:
    that:
    - gitlab_db_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ gitlab_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ gitlab_config_dir }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab

# *****************************************************************************
# update the Docker restore config

# contains the database username and password
- name: make gitlab.rb
  template:
    src: gitlab.rb.j2
    dest: '{{ gitlab_config_dir }}/gitlab.rb'
    backup: yes
    owner: root
    group: root
    mode: 'u=rw,g=r,o='

- name: exists - state file
  stat:
    path: '{{ gitlab_config_dir }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_gitlab_restore

# *****************************************************************************
# Create the data volumes

- name: config-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_cv_name }}'

- name: data-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_dv_name }}'

# *****************************************************************************
# Create the data containers

- name: create container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    detach: true
    restart_policy: no
    hostname: '{{ gitlab_hostname }}'
    ports: '{{ gitlab_port_args }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    volumes:
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
      - '{{ gitlab_cv_name }}:/etc/gitlab:z'
      - '{{ gitlab_dv_name }}:/var/opt/gitlab:z'
      - '{{ gitlab_docker_backup_dir }}:{{ gitlab_backup_mountpoint }}:z'
    image: '{{ gitlab_image_name }}'
    state: present

- name: Copy config into container
  command: >
    docker cp
    '{{ gitlab_config_dir }}/gitlab.rb'
    '{{ gitlab_container_name }}:/etc/gitlab/gitlab.rb'

- name: start container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    state: started

- name: Wait for gitlab to be fully running
  docker_health:
    name: '{{ gitlab_container_name }}'
  register: gitlab_health
  retries: 60
  delay: 5
  until: gitlab_health.Health.Status == 'healthy'

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_gitlab_restore.stat.exists == False

# *****************************************************************************
# Set gitlab root user password

- name: Set gitlab root user password
  command: >
    docker exec -t {{ gitlab_container_name }}
    gitlab-rails runner 
      'user=User.where(id: 1).first;
      user.password="{{ gitlab_root_password }}";
      user.password_confirmation="{{ gitlab_root_password }}";
      user.save!'
