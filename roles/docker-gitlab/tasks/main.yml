---
# file: roles/docker-gitlab/tasks/main.yaml

- assert:
    that:
    - gitlab_db_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ gitlab_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ gitlab_config_dir }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab

# *****************************************************************************
# update the Docker restore config

# contains the database username and password
- name: make gitlab.rb
  template:
    src: gitlab.rb.j2
    dest: '{{ gitlab_config_dir }}/gitlab.rb'
    backup: yes
    owner: root
    group: root
    mode: 'u=rw,g=r,o='

# - name: copy env-file
#   command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.env.list {{ gitlab_config_dir }}'

# - name: copy script
#   command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-gitlab/gitlab.sh {{ gitlab_config_dir }}'

- name: exists - state file
  stat:
    path: '{{ gitlab_config_dir }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_gitlab_restore

# *****************************************************************************
# Update or make the image.

# - name: Checkout image repo
#   git:
#     repo: '{{ gitlab_image_repo }}'
#     version: master
#     dest: '{{ docker_projects_dir }}/docker-gitlab'

# - name: build image
#   docker_image:
#     name: '{{ gitlab_image_name }}'
#     tag: '{{ docker_image_tag }}'
#     path: '{{ docker_projects_dir }}/docker-gitlab'

# Data volume image is now the same as the container image
#- name: build image
#  docker_image:
#    image_name: '{{ gitlab_dv_image_name }}'
#    image_tag: '{{ docker_image_tag }}'
#    dockerfile_dir: '{{ docker_projects_dir }}/docker-gitlab'

# *****************************************************************************
# Create the data volumes

- name: config-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_cv_name }}'


- name: data-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_dv_name }}'

# - name: data-volume container (postgres)
#   docker_volume:
#     name: '{{ gitlab_db_dv_name }}'

# - name: stop prev container (postgres)
#   docker_container:
#     image: '{{ gitlab_db_image_name }}'
#     name: '{{ gitlab_db_container_name }}'
#     state: stopped

# - name: initial populate (postgres)
#   docker_db_init:
#     image_name: '{{ gitlab_db_image_name }}'
#     image_tag: '{{ docker_image_tag }}'
#     container_name: '{{ gitlab_db_dv_name }}_init_db'
#     data_volume_container_name: '{{ gitlab_db_dv_name }}'
#     data_volume_dir: '{{ docker_projects_dir }}/docker-gitlab/postgres/'
#     database_name: gitlabhq_production
#     database_user: '{{ gitlab_db_user }}'
#     database_password: '{{ gitlab_db_password | quote }}'

# *****************************************************************************
# Start the data container running

# - name: start container (redis)
#   docker_container:
#     name: '{{ gitlab_redis_container_name }}'
#     detach: true
#     restart_policy: no
#     image: '{{ redis_image_name }}:{{ docker_image_tag }}'
#     networks:
#       - name: '{{ docker_network_frontend }}'

# - name: start container (postgres)
#   docker_container:
#     name: '{{ gitlab_db_container_name }}'
#     detach: true
#     restart_policy: no
#     volumes_from: '{{ gitlab_db_dv_name }}'
#     image: '{{ gitlab_db_image_name }}:{{ docker_image_tag }}'
#     networks:
#       - name: '{{ docker_network_frontend }}'

# - name: start container (gitlab)
#   docker_container:
#     name: '{{ gitlab_container_name }}'
#     detach: true
#     restart_policy: no
#     hostname: '{{ gitlab_hostname }}'
#     ports: '{{ gitlab_ports }}'
#     networks:
#       - name: '{{ docker_network_frontend }}'
#     volumes-from:
#       - '{{ openssl_dv_name }}'
#       - '{{ gitlab_dv_name }}'
#     env:
#       - GITLAB_HOST={{ gitlab_hostname }}
#       - GITLAB_SSH_HOST={{ gitlab_hostname }}
#       - DB_USER={{ gitlab_db_user }}
#       - DB_PASS={{ gitlab_db_password | quote }}
#       - SMTP_HOST={{ exim4_hostname }}
#       - SMTP_PASS={{ gitlab_email_password | quote }}
#       - LDAP_PASS={{ openldap_proxyagent_password | quote }}
#       - GITLAB_ROOT_PASSWORD={{ gitlab_root_password | quote }}
#       - GITLAB_SECRETS_DB_KEY_BASE={{ gitlab_secrets_db_key_base | quote }}
#     env-file: '{{ docker_projects_dir }}/docker-gitlab/gitlab.env.list'
#     image: '{{ gitlab_image_name }}:{{ docker_image_tag }}'

- name: create container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    detach: true
    restart_policy: no
    hostname: '{{ gitlab_hostname }}'
    ports: '{{ gitlab_port_args }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    volumes:
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
      - '{{ gitlab_cv_name }}:/etc/gitlab:z'
      - '{{ gitlab_dv_name }}:/var/opt/gitlab:z'
      - '{{ gitlab_docker_backup_dir }}:/mnt/backups:z'
    image: '{{ gitlab_image_name }}'
    state: present

- name: Copy config into container
  command: >
    docker cp
    '{{ gitlab_config_dir }}/gitlab.rb'
    '{{ gitlab_container_name }}:/etc/gitlab/gitlab.rb'

- name: start container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    state: started

- name: Wait for gitlab to be fully running
  wait_for:
    delay: 10
    host: "{{ gitlab_ip_addr | ipaddr('address') }}"
    port: 22
    state: started
    timeout: 180

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_gitlab_restore.stat.exists == False
  tags: restore
