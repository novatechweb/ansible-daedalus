#!/bin/sh
#
# This script backs up bacula bootstrap files (BackupCatalog.bsr and bacula-fd.bsr) to github

set -e

# A repository that is used as a backup for the bacula bootstrap file: /var/spool/bacula/{BackupCatalog,bacula-fd}.bsr
repo_name=bacula.bootstrap.backup
github_repo=git@github.com:novatechweb/${repo_name}.git

fqdn={{ ansible_fqdn }}
bacula_home=/var/spool/bacula

github_rsa_public_key_fingerprint='16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48'
#github_dsa_public_key_fingerprint='ad:1c:08:a4:40:e3:6f:9c:f5:66:26:5d:4b:33:5d:8c'
#github_rsa_SHA256_public_key_fingerprint='SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8'
#github_dsa_SHA256_public_key_fingerprint='SHA256:br9IjFspm1vxR3iA35FWE+4VTyz1hYVLIE2t1/CeyWQ'

echo >&2 '[ Try to update github known_hosts keys ]'
rm 2>&1 -f ${bacula_home}/.ssh/github-Key ${bacula_home}/.ssh/known_hosts~
ssh-keyscan github.com >> ${bacula_home}/.ssh/github-Key
fingerprint=$(ssh-keygen -lf ${bacula_home}/.ssh/github-Key | sed 's|^.* \(.*\) github.com .*$|\1|')
if [[ "${fingerprint}" == "${github_rsa_public_key_fingerprint}" ]]; then
    mv 2>&1 ${bacula_home}/.ssh/known_hosts ${bacula_home}/.ssh/known_hosts~
    cat ${bacula_home}/.ssh/github-Key ${bacula_home}/.ssh/known_hosts~ | sort | uniq > ${bacula_home}/.ssh/known_hosts
    rm 2>&1 -f ${bacula_home}/.ssh/known_hosts~ ${bacula_home}/.ssh/github-Key
else
    echo >&2 '[ Could not verify github known_hosts key fingerprint. ]'
    exit 1
fi

cd ${bacula_home}
rm 2>&1 -rf ${bacula_home}/${repo_name}
if ls -1 ${bacula_home}/{BackupCatalog,bacula-fd}.bsr; then
    # The {BackupCatalog,bacula-fd}.bsr files exist, no need to restore them
    restore_bsr='false'
else
    # The {BackupCatalog,bacula-fd}.bsr files do not exist, restore them
    restore_bsr='true'
fi

echo >&2 '[ Check for the branch in the repository ]'
if git 2>&1 clone --branch ${fqdn} ${github_repo} -- ${bacula_home}/${repo_name}; then
    echo >&2 '[ The branch has been created before ]'
    rm 2>&1 -rf ${bacula_home}/${repo_name}
else
    echo >&2 "[ Create the new branch based upon ${fqdn}, and add the .gitignore file ]"
    git 2>&1 clone ${github_repo} -- ${bacula_home}/${repo_name}
    cd ${bacula_home}/${repo_name}
    git 2>&1 checkout --orphan ${fqdn}
    touch .gitignore
    git 2>&1 add .gitignore
    git 2>&1 commit -sm "initial commit of .gitignore for ${fqdn}"
    git 2>&1 push --set-upstream origin ${fqdn}
    cd ${bacula_home}
    rm 2>&1 -rf ${bacula_home}/${repo_name}
    # there isn't a bsr file in the repository to restore
    restore_bsr='false'
fi

echo >&2 '[ Checkout the branch in the repository ]'
if [[ ! -d .git ]]; then
    echo >&2 '[ New local repository ]'
    git 2>&1 init
    echo >&2 "[ Initial fetch of 'origin/${fqdn}' ]"
    git 2>&1 remote add --fetch origin ${github_repo}
    if [[ "${restore_bsr}" == 'false' ]]; then
        echo >&2 "[ Reseting new local repository to 'origin/${fqdn}' ]"
        git 2>&1 reset origin/${fqdn}
        touch .gitignore
    else
        echo >&2 "[ Pulling latest version of 'origin/${fqdn}' ]"
    fi
    git 2>&1 checkout --track origin/${fqdn}
    git 2>&1 config user.name "Bacula Backup System"
    git 2>&1 config user.email "bacula@${fqdn}"
else
    echo >&2 "[ Fetch changes from 'origin/${fqdn}' ]"
    git 2>&1 fetch
    echo >&2 "[ Reseting local repository to latest 'origin/${fqdn}' ]"
    git 2>&1 reset origin/${fqdn}
fi

echo >&2 '[ Add BackupCatalog.bsr and bacula-fd.bsr bootstrap files ]'
git 2>&1 add BackupCatalog.bsr bacula-fd.bsr

echo >&2 '[ Commit changes, or if there are no changes, exit the script ]'
git 2>&1 commit -sm 'commit bacula bootstrap file changes' || exit 0

echo >&2 '[ Push the changes upstream ]'
git 2>&1 push --set-upstream origin ${fqdn}
