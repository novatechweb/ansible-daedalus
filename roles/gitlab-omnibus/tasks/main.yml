---
# file: roles/docker-gitlab/tasks/main.yaml

- assert:
    that:
    - gitlab_db_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

# - name: restore dir
#   file:
#     state: directory
#     path: '{{ gitlab_docker_restore_dir }}'
#     owner: root
#     group: tape
#     mode: 'u=rwx,g=rwx,o=rx'
#     recurse: no
#     setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ gitlab_config_dir }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

# - name: Assemble dir for backup scripts
#   file:
#     path: /usr/libexec/bacula/backup-scripts
#     state: directory

# - name: before_backup script part
#   template:
#     src: before_backup.j2
#     dest: /usr/libexec/bacula/backup-scripts/55.before_backup.gitlab

# - name: after_backup script part
#   template:
#     src: after_backup.j2
#     dest: /usr/libexec/bacula/backup-scripts/55.after_backup.gitlab

# *****************************************************************************
# update the Docker restore config

# contains the database username and password
- name: make gitlab.rb
  template:
    src: gitlab.rb-{{gitlab_version}}.j2
    dest: '{{ gitlab_config_dir }}/gitlab.rb'
    backup: yes
    owner: root
    group: root
    mode: 'u=rw,g=r,o='
- name: exists - state file
  stat:
    path: '{{ gitlab_config_dir }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_gitlab_restore

# *****************************************************************************
# upgrade?

- include_tasks: upgrade.yml
  when:
  - upgrade

# *****************************************************************************
# Create the data volumes

- name: config-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_cv_name }}'


- name: data-volume container (gitlab)
  docker_volume:
    name: '{{ gitlab_dv_name }}'

# *****************************************************************************
# Create the gitlab container

- name: create container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    detach: true
    restart_policy: '{{ docker_restart_policy }}'
    hostname: '{{ gitlab_hostname }}'
    ports: '{{ gitlab_port_args }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    volumes:
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
      - '{{ gitlab_cv_name }}:/etc/gitlab:z'
      - '{{ gitlab_dv_name }}:/var/opt/gitlab:z'
      - '{{ gitlab_docker_backup_dir }}:/mnt/backups:z'
    image: '{{ gitlab_image_name }}'
    state: present

- name: Copy config into container
  command: >
    docker cp
    '{{ gitlab_config_dir }}/gitlab.rb'
    '{{ gitlab_container_name }}:/etc/gitlab/gitlab.rb'

- name: start container (gitlab)
  docker_container:
    name: '{{ gitlab_container_name }}'
    state: started

- name: Wait for gitlab to be fully running
  uri:
    url: 'https://{{ gitlab_hostname }}/users/sign_in'
  register: health
  retries: 10
  delay: 30
  until: health is success
  when: gitlab_version is version('8.17', '<')

- name: Wait for a container to become healthy
  docker_health:
    name: "{{gitlab_container_name}}"
  register: health
  retries: 10
  delay: 30
  until: health.Health.Status == "healthy"
  when: gitlab_version is version('8.17', '>=')

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_gitlab_restore.stat.exists == False

# *****************************************************************************
# final maintenance

- name: reconfigure gitlab for updated configuration
  command: >
    docker exec -t {{ gitlab_container_name }} gitlab-ctl reconfigure
  register: reconfigure
  retries: 10
  delay: 30
  until: reconfigure is success

- name: ensure all migrations are complete
  command: >
    docker exec -t {{ gitlab_container_name }} gitlab-rake db:migrate
  register: migrate
  retries: 10
  delay: 30
  until: migrate is success

- name: run a diagnostic check over the application
  command: >
    docker exec -t {{ gitlab_container_name }} gitlab-rake gitlab:check
  register: check
  retries: 10
  delay: 30
  until: check is success

- name: Ensure merge request commits are fetched
  include_tasks: fetch_merge_requests.yml
  when: 
  - gitlab_version is version('9.0', '>=')
  - gitlab_version is version('10.2', '<')
