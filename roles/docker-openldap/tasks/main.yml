---
# file: roles/docker-openldap/tasks/main.yaml

# This will generate passwords for these accounts.
# A manuel step of setting the passwords into the LDAP database is required
- assert:
    that:
    - openldap_admin_password is defined
    - openldap_proxyagent_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ openldap_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ openldap_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.openldap

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.openldap

# *****************************************************************************
# update the Docker restore config

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ openldap_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_openldap_restore

# *****************************************************************************
# Update or make the image.
- name: Checkout image repo
  git:
    repo: '{{ openldap_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-openldap'


- name: build image
  docker_image:
    name: '{{ openldap_image_name }}'
    tag: '{{ docker_image_tag }}'
    path: '{{ docker_projects_dir }}/docker-openldap'

# *****************************************************************************
# Create the data volumes

- name: config volume
  docker_volume:
    name: '{{ openldap_cv_name }}'

- name: data volume
  docker_volume:
    name: '{{ openldap_dv_name }}'

# *****************************************************************************
# Populate the ldap data-volume with default data

- name: initial populate
  docker_container:
    detach: false
    name: openldap_populate
    image: '{{ openldap_image_name }}:{{ docker_image_tag }}'
    command: ['init_data_volumes']
    volumes:
      - '{{ openldap_cv_name }}:/etc/ldap:z'
      - '{{ openldap_dv_name }}:/var/lib/ldap:z'
  when: st_openldap_restore.stat.exists == False

- name: initial populate
  docker_container:
    name: openldap_populate
    state: absent

# *****************************************************************************
# Start the data container running

- name: create container (ldap)
  docker_container:
    name: '{{ openldap_container_name }}'
    detach: true
    restart_policy: always
    hostname: '{{ openldap_network.hostname }}'
    ports: '{{ ldap_network.port_args }}'
    volumes:
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
      - '{{ openldap_cv_name }}:/etc/ldap:z'
      - '{{ openldap_dv_name }}:/var/lib/ldap:z'
    env:
      LDAP_HOSTNAME: '{{ openldap_network.hostname }}'
    image: '{{ openldap_image_name }}:{{ docker_image_tag }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    state: present

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_openldap_restore.stat.exists == False
  tags: restore

- name: start container (ldap)
  docker_container:
    name: '{{ openldap_container_name }}'
    state: started

# *****************************************************************************
# Update or make the image.
- name: Checkout image repo
  git:
    repo: '{{ phpldapadmin_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-phpldapadmin'

- name: build image
  docker_image:
    name: '{{ phpldapadmin_image_name }}'
    tag: '{{ docker_image_tag }}'
    path: '{{ docker_projects_dir }}/docker-phpldapadmin'

- name: start container (phpldapadmin)
  docker_container:
    name: '{{ phpldapadmin_container_name }}'
    detach: true
    restart_policy: always
    hostname: '{{ phpldapadmin_network.hostname }}'
    ports: '{{ phpldapadmin_network.port_args }}'
    volumes:
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
    env:
      PHPLDAPADMIN_HTTPS: 'false'
      PHPLDAPADMIN_LDAP_HOSTS: 'ldap'
      LDAP_HOSTNAME: '{{ container_addr_map.phpldapadmin.hostname }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    image: '{{ phpldapadmin_image_name }}:{{ docker_image_tag }}'

# *****************************************************************************
# Set the LDAP passwords

# - name: wait for LDAP to start
#   wait_for:
#     delay: 5
#     host: '{{ openldap_ip_addr }}'
#     port: 389
#     state: started

- name: set LDAP admin password
  command: 'docker exec -i {{ openldap_container_name }} /docker-entrypoint.sh set_admin_pass {{ openldap_admin_password | quote }}'

- name: set LDAP proxyagent password
  command: 'docker exec -i {{ openldap_container_name }} /docker-entrypoint.sh set_proxyagent_pass {{ openldap_admin_password | quote }} {{ openldap_proxyagent_password | quote }}'
