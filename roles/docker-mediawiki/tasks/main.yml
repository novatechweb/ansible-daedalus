---
# file: roles/docker-mediawiki/tasks/main.yaml

- assert:
    that:
    - wiki_db_root_password is defined
    - wiki_db_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ host_wiki_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ wiki_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.wiki

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.wiki

# *****************************************************************************
# update the Docker restore config

- name: make config.sh
  template:
    src: config.sh.j2
    dest: '{{ docker_restore_config_base_dir }}/{{ wiki_dv_name }}/config.sh'
    backup: yes
    owner: root
    group: tape
    mode: 'u=rw,g=r,o='

- name: copy script
  command: 'cp --verbose --update --backup=numbered {{ docker_projects_dir }}/docker-mediawiki/mediawiki.sh {{ docker_restore_config_base_dir }}/{{ wiki_dv_name }}'

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ wiki_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_mediawiki_restore

# *****************************************************************************
# Update or make the image.

- name: Checkout image repo
  git:
    repo: '{{ wiki_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-mediawiki'

- name: build image
  docker_image:
    name: '{{ wiki_image_name }}'
    tag: '{{ docker_image_tag }}'
    path: '{{ docker_projects_dir }}/docker-mediawiki'
    force: True

# *****************************************************************************
# Create the data volumes

- name: data-volume container (mediwiki)
  docker_volume:
    name: '{{ wiki_dv_name }}'

- name: data-volume container (mysql)
  docker_volume:
    name: '{{ wiki_db_dv_name }}'

- name: stop prev container (mysql)
  docker_container:
    image: '{{ wiki_db_image_name }}'
    name: '{{ wiki_db_container_name }}'
    state: stopped

- name: initial populate (mysql)
  docker_db_init:
    image_name: '{{ wiki_db_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    container_name: '{{ wiki_db_dv_name }}_init_db'
    data_volume_container_name: '{{ wiki_db_dv_name }}'
    database_name: wikidb
    database_user: '{{ wiki_db_user }}'
    database_password: '{{ wiki_db_password | quote }}'
    database_root_password: '{{ wiki_db_root_password | quote }}'

# *****************************************************************************
# Start the data container running

- name: start container (mysql)
  docker_container:
    name: '{{ wiki_db_container_name }}'
    detach: true
    restart_policy: no
    volumes_from: '{{ wiki_db_dv_name }}'
    image: '{{ wiki_db_image_name }}:{{ docker_image_tag }}'
    networks:
      - name: '{{ docker_network_frontend }}'

- name: start container (mediwiki)
  docker_container:
    name: '{{ wiki_container_name }}'
    detach: true
    restart_policy: no
    hostname: '{{ container_addr_map.wiki.hostname }}' 
    ports: '{{ container_port_map.wiki.port_args }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    volumes-from: 
      - '{{ openssl_dv_name }}'
      - '{{ wiki_dv_name }}'
    env:
      WIKI_HOSTNAME: '{{ container_addr_map.wiki.hostname }}'
      WIKI_MAIL_USER: 'wiki'
      WIKI_MAIL_PASSWORD: '{{ wiki_email_password | quote }}'
    image: '{{ wiki_image_name }}:{{ docker_image_tag }}'

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_mediawiki_restore.stat.exists == False
  tags: restore
