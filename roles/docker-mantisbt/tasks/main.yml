---
# file: roles/docker-mantisbt/tasks/main.yaml

- assert:
    that:
    - mantisbt_db_root_password is defined
    - mantisbt_db_password is defined

# *****************************************************************************
# Setup the directory where the backup and restore is to take place

- name: restore dir
  file:
    state: directory
    path: '{{ mantisbt_docker_restore_dir }}'
    owner: root
    group: tape
    mode: 'u=rwx,g=rwx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ mantisbt_db_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.mantisbt

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.mantisbt

# *****************************************************************************
# update the Docker restore config

- name: make config.sh
  template:
    src: config.sh.j2
    dest: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}/config.sh'
    backup: yes
    owner: root
    group: tape
    mode: 'u=rw,g=r,o='

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_mantisbt_restore

- name: exists - state file (mysql)
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ mantisbt_db_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_mantisbt_db_restore

# *****************************************************************************
# Update or make the image.
- name: Checkout image repo
  git:
    repo: '{{ mantisbt_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-mantisbt'

- name: copy script
  copy:
    remote_src: true
    src: '{{ docker_projects_dir }}/docker-mantisbt/mantisbt.sh'
    dest: '{{ docker_restore_config_base_dir }}/{{ mantisbt_dv_name }}/'

- name: build image
  docker_image:
    name: '{{ mantisbt_image_name }}'
    tag: '{{ docker_image_tag }}'
    path: '{{ docker_projects_dir }}/docker-mantisbt'

# - name: Checkout db repo
#   git:
#     repo: '{{ mantisbt_db_image_repo }}'
#     version: master
#     dest: '{{ docker_projects_dir }}/docker-mysql-data'

# - name: build data-container image
#   docker_image:
#     name: '{{ mantisbt_db_image_name }}'
#     tag: '{{ docker_image_tag }}'
#     path: '{{ docker_projects_dir }}/docker-mysql-data'
#     force: true
  
# *****************************************************************************
# Create the data volumes

- name: data-volume container (mantisbt)
  docker_volume:
    name: '{{ mantisbt_dv_name }}'

- name: config-volume container (mysql)
  docker_volume:
    name: '{{ mantisbt_db_cv_name }}'

- name: data-volume container (mysql)
  docker_volume:
    name: '{{ mantisbt_db_dv_name }}'

# - name: stop prev container (mysql)
#   docker_container:
#     image: '{{ mantisbt_db_image_name }}:{{ docker_image_tag }}'
#     name: '{{ mantisbt_db_container_name }}'
#     state: stopped

# - name: initial populate (mysql - import config)
#   command: 'docker run --rm --volumes-from {{ mantisbt_db_dv_name }} -v {{ mantisbt_docker_restore_dir }}:/tmp/conf.d {{ mantisbt_db_image_name }}:{{ docker_image_tag }}'

# - name: initial populate (mysql - database)
#   docker_db_init:
#     image_name: '{{ mantisbt_db_image_name }}'
#     image_tag: '{{ docker_image_tag }}'
#     container_name: '{{ mantisbt_db_dv_name }}_init_db'
#     data_volume_container_name: '{{ mantisbt_db_dv_name }}'
#     database_name: bugtracker
#     database_user: '{{ mantisbt_db_user }}'
#     database_password: '{{ mantisbt_db_password | quote }}'
#     database_root_password: '{{ mantisbt_db_root_password | quote }}'

- name: initialize mysql container
  when: st_mantisbt_db_restore.stat.exists == False
  block:
  - name: make temporary directory for config
    tempfile:
      state: directory
    register: config_tempdir
  - name: upload mysql config
    copy:
      src: '{{ item }}'
      dest: '{{ config_tempdir.path }}/{{ item }}'
    with_items:
    - largefile.cnf
    - character-set.cnf
  - name: copy mysql config to volume
    command: >
      docker run --rm 
      -v '{{ config_tempdir.path }}:/from'
      -v '{{ mantisbt_db_cv_name }}:/to'
      alpine /bin/ash -c 'cp -v /from/* /to'
  - name: Start initialization of empty volume
    docker_container:
      name: '{{ mantisbt_db_dv_name}}_init_db'
      image: '{{ mantisbt_db_image_name }}:{{ mantisbt_db_image_tag }}'
      volumes:
        - '{{ mantisbt_db_cv_name }}:/etc/mysql/conf.d:z'
        - '{{ mantisbt_db_dv_name }}:/var/lib/mysql:z'
      env:
        MYSQL_DATABASE: 'bugtracker'
        MYSQL_ROOT_PASSWORD: '{{ mantisbt_db_root_password }}'
        MYSQL_USER: '{{ mantisbt_db_user }}'
        MYSQL_PASSWORD: '{{ mantisbt_db_password }}'
  - name: wait for initialization to complete
    shell: >
        printf 'SHOW GLOBAL STATUS\n' | docker exec -i 
        {{ mantisbt_db_dv_name}}_init_db 
        mysql --host=localhost --user={{ mantisbt_db_user | quote }}
        --password={{ mantisbt_db_password | quote }} bugtracker
    register: container_status
    retries: 20
    delay: 3
    until: "container_status.rc == 0"
  - name: remove initialization container
    docker_container:
      name: '{{ mantisbt_db_dv_name}}_init_db'
      state: stopped
  - name: State file
    shell: 'date --rfc-3339=seconds > {{ docker_restore_config_base_dir }}/{{ mantisbt_db_dv_name }}/restore.date.txt'

# *****************************************************************************
# Start the data container running

- name: start container (mysql)
  docker_container:
    name: '{{ mantisbt_db_container_name }}'
    detach: true
    restart_policy: always
    volumes:
      - '{{ mantisbt_db_cv_name }}:/etc/mysql/conf.d:z'
      - '{{ mantisbt_db_dv_name }}:/var/lib/mysql:z'
    image: '{{ mantisbt_db_image_name }}:{{ mantisbt_db_image_tag }}'
    networks:
      - name: '{{ docker_network_frontend }}'

- name: start container (mantisbt)
  docker_container:
    name: '{{ mantisbt_container_name }}'
    detach: true
    restart_policy: always
    hostname: '{{ mantisbt_hostname }}'
    ports: '{{ mantisbt_port_args }}'
    networks:
      - name: '{{ docker_network_frontend }}'
    volumes: 
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'
      - '{{ mantisbt_dv_name }}:/var/www/html:z'
    env: 
      MANTISBT_HOSTNAME: '{{ mantisbt_hostname }}'
      MANTISBT_MAIL_USER: 'mantis'
      MANTISBT_MAIL_PASSWORD: '{{ mantisbt_email_password | quote }}'
      MANTISBT_LDAP_PASSWORD: '{{ openldap_proxyagent_password | quote }}'
    image: '{{ mantisbt_image_name }}:{{ docker_image_tag }}'

# *****************************************************************************
# remove the MySQL config in the restore directory

- name: cleanup - import mysql config
  file:
    path: '{{ mantisbt_docker_restore_dir }}/{{ item }}'
    state: absent
  with_items:
  - largefile.cnf
  - character-set.cnf

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_mantisbt_restore.stat.exists == False
