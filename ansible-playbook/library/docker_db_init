#!/bin/bash

# Ansible transports arguments to modules in a file. The
# path to the arguments file is in $1, and the file
# contains the module's arguments like this:
#
#       image_name=debian pull_image_tag=8 working_image_tag=current
#
# Arguments:
#    image_name - [postgres, mysql, mariadb]
#    image_tag
#    container_name
#    data_volume_container_name - optional
#    data_volume_dir - required by postgres only
#    database_name
#    database_user
#    database_password
#    database_root_password - required by mysql only

eval $(sed -e "s/\s?\([^=]+\)\s?=\s?\(\x22\([^\x22]+\)\x22|\x27\([^\x27]+\)\x27|\(\S+\)\)\s?/\1='\2'/p" $1)

# {
#     mkdir -p /tmp/ansible
#     filename=$(mktemp -q --tmpdir=/tmp/ansible/ docker_db_init.XXXXXX)
#     chgrp users ${filename}
#     chmod a+r ${filename}
#     echo "${*}" >> ${filename}
#     echo "------------------------------" >> ${filename}
#     echo "image_name:                   ${image_name}" >> ${filename}
#     echo "data_volume_dir:              ${data_volume_dir}" >> ${filename}
#     echo "database_root_password:       ${database_root_password}" >> ${filename}
#     echo "image_tag:                    ${image_tag}" >> ${filename}
#     echo "container_name:               ${container_name}" >> ${filename}
#     echo "data_volume_container_name:   ${data_volume_container_name}" >> ${filename}
#     echo "database_name:                ${database_name}" >> ${filename}
#     echo "database_user:                ${database_user}" >> ${filename}
#     echo "database_password:            ${database_password}" >> ${filename}
#     echo "------------------------------" >> ${filename}
# }

if [[ -z "${image_name}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs image_name= argument\"}"
    exit 1
fi

case ${image_name} in
    *postgres*)
        if [[ -z "${data_volume_dir}" ]]; then
            printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs data_volume_dir= argument\"}"
            exit 1
        fi
        ;;

    *mysql*)
        data_volume_dir=""
        if [[ -z "${database_root_password}" ]]; then
            printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs database_password= argument\"}"
            exit 1
        fi
        ;;

    *mariadb*)
        data_volume_dir=""
        if [[ -z "${database_root_password}" ]]; then
            printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs database_password= argument\"}"
            exit 1
        fi
        ;;

    *)
        printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs image_name= argument from [postgres, mysql, mariadb]\"}"
        exit 1
        ;;
esac

if [[ -z "${image_tag}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs image_tag= argument\"}"
    exit 1
fi

if [[ -z "${container_name}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs container_name= argument\"}"
    exit 1
fi

if [[ ! -z "${data_volume_container_name}" ]]; then
    data_volume_container_name="--volumes-from ${data_volume_container_name}"
else
    data_volume_container_name=""
fi

if [[ -z "${database_name}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs database_name= argument\"}"
    exit 1
fi

if [[ -z "${database_user}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs database_user= argument\"}"
    exit 1
fi

if [[ -z "${database_password}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs database_password= argument\"}"
    exit 1
fi

# *****************************************************************************
# Cleanup previous

docker inspect ${container_name} &> /dev/null
if [[ "${?}" == "0" ]]; then
    if [[ $(docker inspect -f '{{ .State.Running }}' ${container_name}) == 'true' ]]; then
        docker stop ${container_name} &> /dev/null
    fi
    docker rm -v ${container_name} &> /dev/null
fi

# *****************************************************************************
# Start the docker container to initilize the database

case ${image_name} in
    *postgres*)
        # set command to run to check if database has finished starting
        check_command="docker exec ${container_name} su 2>&1 postgres -c 'psql -l' | grep -q \"^ ${database_name}\b\" &> /dev/null"
        # start the docker container that will generate the database files
        docker run -d --name ${container_name} \
          ${data_volume_container_name} \
          --env POSTGRES_DB=${database_name} \
          --env POSTGRES_USER=${database_user} \
          --env POSTGRES_PASSWORD=${database_password} \
          -v ${data_volume_dir}:/docker-entrypoint-initdb.d/ \
          ${image_name}:${image_tag} &> /dev/null
        run_result="${?}"
        ;;

    *mysql*)
        # set command to run to check if database has finished starting
        check_command="printf 'SHOW GLOBAL STATUS\n' | docker exec -i ${container_name} mysql --host=localhost --user=\"${database_user}\" --password=\"${database_password}\" ${database_name} &> /dev/null"
        # start the docker container that will generate the database files
        docker run -d --name ${container_name} \
          ${data_volume_container_name} \
          --env MYSQL_DATABASE=${database_name} \
          --env MYSQL_ROOT_PASSWORD=${database_root_password} \
          --env MYSQL_USER=${database_user} \
          --env MYSQL_PASSWORD=${database_password} \
          ${image_name}:${image_tag} &> /dev/null
        run_result="${?}"
        ;;

    *mariadb*)
        # set command to run to check if database has finished starting
        check_command="printf 'SHOW GLOBAL STATUS\n' | docker exec -i ${container_name} mysql --host=localhost --user=\"${database_user}\" --password=\"${database_password}\" ${database_name} &> /dev/null"
        # start the docker container that will generate the database files
        docker run -d --name ${container_name} \
          ${data_volume_container_name} \
          --env MYSQL_DATABASE=${database_name} \
          --env MYSQL_ROOT_PASSWORD=${database_root_password} \
          --env MYSQL_USER=${database_user} \
          --env MYSQL_PASSWORD=${database_password} \
          ${image_name}:${image_tag} &> /dev/null
        run_result="${?}"
        ;;
esac

if [[ "${run_result}" != "0" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Failed to start container used to initilizing the database.\"}"
    exit 1
fi

# *****************************************************************************
# start printing result

printf "{"

# *****************************************************************************
# Wait for the database container to reach started state

while [[ $(docker inspect -f '{{ .State.Running }}' ${container_name}) != 'true' ]]; do
    sleep 3
    printf ' '
done

# *****************************************************************************
# Wait for the database container to finish starting

eval "${check_command}"
while [[ "${?}" != "0" ]]; do
    sleep 3
    printf ' '
    [[ $(docker inspect -f '{{ .State.Running }}' ${container_name}) == 'false' ]] && break
    eval "${check_command}"
done

# *****************************************************************************
# Cleanup the running container

[[ $(docker inspect -f '{{ .State.Running }}' ${container_name}) == 'true' ]] && docker stop ${container_name} &> /dev/null
docker rm -v ${container_name} &> /dev/null

if [[ "${?}" == "0" ]]; then
    printf "\"failed\": false, \"changed\": true, \"msg\": \"Finished initilizing the database.\"}"
    exit 0
fi

printf "\"failed\": true, \"changed\": true, \"msg\": \"Failed to stop and remove container used to initilizing the database.\"}"
exit 1
