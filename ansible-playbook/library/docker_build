#!/bin/bash

# Ansible transports arguments to modules in a file. The
# path to the arguments file is in $1, and the file
# contains the module's arguments like this:
#
#       image_name=debian pull_image_tag=8 working_image_tag=current
#
# Arguments:
#    image_name
#    image_tag
#    dockerfile_dir

eval $(sed -e "s/\s?\([^=]+\)\s?=\s?\(\x22\([^\x22]+\)\x22|\x27\([^\x27]+\)\x27|\(\S+\)\)\s?/\1='\2'/p" $1)

if [[ -z "${image_name}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs image_name= argument\"}"
    exit 1
fi

if [[ -z "${image_tag}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs image_tag= argument\"}"
    exit 1
fi

if [[ -z "${dockerfile_dir}" ]]; then
    printf "{\"failed\": true, \"changed\": false, \"msg\": \"Module needs dockerfile_dir= argument\"}"
    exit 1
fi

# *****************************************************************************
# Check if image_tag exists, get the current image ID

starting_ID=$(docker 2>&1 inspect -f '{{ .Id }}' ${image_name}:${image_tag})
starting_id_result="${?}"

# *****************************************************************************
# rebuild/update/check image

build_log=$(docker build --rm --tag ${image_name}:${image_tag} ${dockerfile_dir})
build_result="${?}"

if [[ ${build_result} != "0" ]]; then
    # build failed
    printf "{\"failed\": true, \"changed\": true, \"stdout\": \"${build_log}\"}"
    exit 1
fi

# *****************************************************************************
# Check image_tag, get the latest image ID

ending_ID=$(docker 2>&1 inspect -f '{{ .Id }}' ${image_name}:${image_tag})
ending_id_result="${?}"

# *****************************************************************************
# return the result

if [[ "${ending_id_result}" != "0" ]]; then
    # build failed
    printf "{\"failed\": true, \"changed\": true, \"msg\": \"docker inspect %s:%s  ==>  %s\"}" ${image_name} ${image_tag} ${ending_ID}
    exit 1
fi

if [[ "${starting_id_result}" == "0" ]]; then
    if [[ "${starting_ID}" == "${ending_ID}" ]]; then
        printf "{\"failed\": false, \"changed\": false, \"msg\": \"Image has not changed.\"}"
        exit 0
    else
        printf "{\"failed\": false, \"changed\": true, \"msg\": \"Image was updated from Id: ${starting_ID} to Id ${ending_ID}\"}"
        exit 0
    fi
else
    printf "{\"failed\": false, \"changed\": true, \"msg\": \"Built image ${image_name}:${image_tag}. Id: ${ending_ID}\"}"
    exit 0
fi
